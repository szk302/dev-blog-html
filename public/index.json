[{"content":"yarnのv1を使用している環境でproxyを建てずオフラインインストールしたいという要望があったので調査。\n   環境   yarn: 1.22.19\n     方法 オフラインインストール用モジュールの取得 以下の.yarnrcをプロジェクトのディレクトリに配置し、node_moduels,yarnのキャッシュを削除して yarn install する\n  offlineインストール用モジュールの配置場所作成(今回は yarn_offline ディレクトリに配置する)\n  mkdir yarn_offline\n     node_modulesの削除\n  rm -rf node_modules\n     yarnのcacheクリア\n  yarn cache clean\n     .yarnrcの配置\nyarn-offline-mirror \u0026#34;./yarn_offline\u0026#34; yarn-offline-mirror-pruning true     パッケージの取得\n  yarn install --verbose\n       オフラインインストールの実行  オフラインインストールの実行\n  yarn install --offline\n         参考   https://classic.yarnpkg.com/blog/2016/11/24/offline-mirror/\n  yarn-offline-mirror-pruning\n     ","permalink":"https://szk302.dev/posts/yarn_v1%E3%81%A7%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%82%92%E3%82%AA%E3%83%95%E3%83%A9%E3%82%A4%E3%83%B3%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B/","summary":"yarnのv1を使用している環境でproxyを建てずオフラインインストールしたいという要望があったので調査。 環境 yarn: 1.22.19 方法 オフラインインストー","title":"yarn_v1でパッケージをオフラインインストールする"},{"content":"テストで使用するのでサクッと作りたいというご要望\n   方法 作成 bash POLICY_NAME=\u0026#34;szk302-iam-policy\u0026#34; aws iam create-policy --policy-name \u0026#34;${POLICY_NAME}\u0026#34; --policy-document file://./policy.json   表示 { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ec2:Describe*\u0026#34;, \u0026#34;iam:ListRoles\u0026#34;, \u0026#34;sts:AssumeRole\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] }   jsonファイル使わない版 bash POLICY_NAME=\u0026#34;szk302-iam-policy\u0026#34; aws iam create-policy --policy-name \u0026#34;${POLICY_NAME}\u0026#34; --policy-document \u0026#39;{\u0026#34;Version\u0026#34;:\u0026#34;2012-10-17\u0026#34;,\u0026#34;Statement\u0026#34;:[{\u0026#34;Effect\u0026#34;:\u0026#34;Allow\u0026#34;,\u0026#34;Action\u0026#34;:[\u0026#34;ec2:Describe*\u0026#34;,\u0026#34;iam:ListRoles\u0026#34;,\u0026#34;sts:AssumeRole\u0026#34;],\u0026#34;Resource\u0026#34;:\u0026#34;*\u0026#34;}]}\u0026#39;     削除 bash ACCOUNT_ID=123456789012 POLICY_NAME=\u0026#34;szk302-iam-policy\u0026#34; POLICY_ARN=\u0026#34;arn:aws:iam::${ACCOUNT_ID}:policy/${POLICY_NAME}\u0026#34; aws iam delete-policy --policy-arn \u0026#34;${POLICY_ARN}\u0026#34;      参考   aws/iam/create-policy\n  aws/iam/delete-policy\n     ","permalink":"https://szk302.dev/posts/AWSCLI%E3%81%A7%E8%A1%8C%E3%81%86IAM%E3%83%9D%E3%83%AA%E3%82%B7%E3%83%BC%E3%81%AE%E4%BD%9C%E6%88%90%E3%81%A8%E5%89%8A%E9%99%A4/AWSCLI%E3%81%A7%E8%A1%8C%E3%81%86IAM%E3%83%9D%E3%83%AA%E3%82%B7%E3%83%BC%E3%81%AE%E4%BD%9C%E6%88%90%E3%81%A8%E5%89%8A%E9%99%A4/","summary":"テストで使用するのでサクッと作りたいというご要望 方法 作成 bash POLICY_NAME=\u0026#34;szk302-iam-policy\u0026#34; aws iam create-policy --policy-name \u0026#34;${POLICY_NAME}\u0026#34; --policy-document file://./policy.json 表示 { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ec2:Describe*\u0026#34;, \u0026#34;iam:ListRoles\u0026#34;, \u0026#34;sts:AssumeRole\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } jsonファイル使わない","title":"AWSCLIで行うIAMポリシーの作成と削除"},{"content":"テストで使用するのでサクッと作りたいというご要望\n   方法 作成 bash ROLE_NAME=\u0026#34;szk302-iam-role\u0026#34; aws iam create-role --role-name \u0026#34;${ROLE_NAME}\u0026#34; --assume-role-policy-document file://./ec2-assume-role-policy.json   ec2-assume-role-policy.json { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;sts:AssumeRole\u0026#34; ], \u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: [ \u0026#34;ec2.amazonaws.com\u0026#34; ] } } ] }   jsonファイル使わない版 bash ROLE_NAME=\u0026#34;szk302-iam-role\u0026#34; aws iam create-role --role-name \u0026#34;${ROLE_NAME}\u0026#34; --assume-role-policy-document \u0026#39;{\u0026#34;Version\u0026#34;:\u0026#34;2012-10-17\u0026#34;,\u0026#34;Statement\u0026#34;:[{\u0026#34;Effect\u0026#34;:\u0026#34;Allow\u0026#34;,\u0026#34;Action\u0026#34;:[\u0026#34;sts:AssumeRole\u0026#34;],\u0026#34;Principal\u0026#34;:{\u0026#34;Service\u0026#34;:[\u0026#34;ec2.amazonaws.com\u0026#34;]}}]}\u0026#39;     ポリシーの付与 bash ACCOUNT_ID=\u0026#34;123456789101\u0026#34; ROLE_NAME=\u0026#34;szk302-iam-role\u0026#34; POLICY_NAME=\u0026#34;szk302-iam-policy\u0026#34; POLICY_ARN=\u0026#34;arn:aws:iam::${ACCOUNT_ID}:policy/${POLICY_NAME}\u0026#34; aws iam attach-role-policy --policy-arn ${POLICY_ARN} --role-name \u0026#34;${ROLE_NAME}\u0026#34;    ポリシーの剥奪 bash ACCOUNT_ID=\u0026#34;123456789101\u0026#34; ROLE_NAME=\u0026#34;szk302-iam-role\u0026#34; POLICY_NAME=\u0026#34;szk302-iam-policy\u0026#34; POLICY_ARN=\u0026#34;arn:aws:iam::${ACCOUNT_ID}:policy/${POLICY_NAME}\u0026#34; aws iam detach-role-policy --policy-arn ${POLICY_ARN} --role-name \u0026#34;${ROLE_NAME}\u0026#34;    削除 bash ROLE_NAME=\u0026#34;szk302-iam-role\u0026#34; aws iam delete-role --role-name \u0026#34;${ROLE_NAME}\u0026#34;      備考 lambda版 ROLE_NAME=\u0026#34;szk302-role\u0026#34; aws iam create-role --role-name \u0026#34;${ROLE_NAME}\u0026#34; --assume-role-policy-document file://./lambda-assume-role-policy.json     参考   aws/iam/create-role\n  aws/iam/delete-role\n  aws/iam/attach-role-policy\n  aws/iam/detach-role-policy\n     ","permalink":"https://szk302.dev/posts/AWSCLI%E3%81%A7%E8%A1%8C%E3%81%86IAM%E3%83%AD%E3%83%BC%E3%83%AB%E3%81%AE%E4%BD%9C%E6%88%90%E3%81%A8%E5%89%8A%E9%99%A4/AWSCLI%E3%81%A7%E8%A1%8C%E3%81%86IAM%E3%83%AD%E3%83%BC%E3%83%AB%E3%81%AE%E4%BD%9C%E6%88%90%E3%81%A8%E5%89%8A%E9%99%A4/","summary":"テストで使用するのでサクッと作りたいというご要望 方法 作成 bash ROLE_NAME=\u0026#34;szk302-iam-role\u0026#34; aws iam create-role --role-name \u0026#34;${ROLE_NAME}\u0026#34; --assume-role-policy-document file://./ec2-assume-role-policy.json ec2-assume-role-policy.json { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;sts:AssumeRole\u0026#34; ], \u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: [ \u0026#34;ec2.amazonaws.com\u0026#34; ] } } ] } jsonファイル使わ","title":"AWSCLIで行うIAMロールの作成と削除"},{"content":"テストで使用するのでサクッと作りたいというご要望\n   方法 作成 bash BUCKET_NAME=\u0026#34;szk302.bucket\u0026#34; REGION=\u0026#34;ap-northeast-1\u0026#34; aws s3api create-bucket --bucket \u0026#34;${BUCKET_NAME}\u0026#34; --create-bucket-configuration \u0026#34;LocationConstraint=${REGION}\u0026#34;    削除 bash BUCKET_NAME=\u0026#34;szk302.bucket\u0026#34; aws s3api delete-bucket --bucket \u0026#34;${BUCKET_NAME}\u0026#34;    Bucketを空にする bash BUCKET_NAME=\u0026#34;szk302.bucket\u0026#34; aws s3 rm \u0026#34;s3://${BUCKET_NAME}\u0026#34; --recursive    公開アクセス設定 設定(すべてPrivate) bash BUCKET_NAME=\u0026#34;szk302.bucket\u0026#34; aws s3api put-public-access-block --bucket ${BUCKET_NAME} --public-access-block-configuration BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true    取得 bash BUCKET_NAME=\u0026#34;szk302.bucket\u0026#34; aws s3api get-public-access-block --bucket ${BUCKET_NAME}     暗号化設定 設定(デフォルト) bash BUCKET_NAME=\u0026#34;szk302.bucket\u0026#34; aws s3api put-bucket-encryption --bucket \u0026#34;${BUCKET_NAME}\u0026#34; --server-side-encryption-configuration \u0026#39;{\u0026#34;Rules\u0026#34;: [{\u0026#34;ApplyServerSideEncryptionByDefault\u0026#34;: {\u0026#34;SSEAlgorithm\u0026#34;: \u0026#34;AES256\u0026#34;}}]}\u0026#39;    取得 bash BUCKET_NAME=\u0026#34;szk302.bucket\u0026#34; aws s3api get-bucket-encryption --bucket \u0026#34;${BUCKET_NAME}\u0026#34;     バージョニング設定 設定 bash BUCKET_NAME=\u0026#34;szk302.bucket\u0026#34; aws s3api put-bucket-versioning --bucket ${BUCKET_NAME} --versioning-configuration Status=Enabled    取得 bash BUCKET_NAME=\u0026#34;szk302.bucket\u0026#34; aws s3api get-bucket-versioning --bucket ${BUCKET_NAME}     ACL設定   Note  オーナーシップコントロール設定する場合は不要かもしれない。     設定(Private) bash BUCKET_NAME=\u0026#34;szk302.bucket\u0026#34; aws s3api put-bucket-acl --bucket \u0026#34;${BUCKET_NAME}\u0026#34; --acl private    取得 bash aws s3api get-bucket-acl --bucket \u0026#34;${BUCKET_NAME}\u0026#34;     オーナーシップコントロール設定 設定 bash BUCKET_NAME=\u0026#34;szk302.bucket\u0026#34; aws s3api put-bucket-ownership-controls --bucket \u0026#34;${BUCKET_NAME}\u0026#34; --ownership-controls Rules=[{ObjectOwnership=BucketOwnerEnforced}]    取得 bash aws s3api get-bucket-ownership-controls --bucket \u0026#34;${BUCKET_NAME}\u0026#34;     ライフサイクル設定 設定(400日で削除) bash BUCKET_NAME=\u0026#34;szk302.bucket\u0026#34; aws s3api put-bucket-lifecycle-configuration --bucket \u0026#34;${BUCKET_NAME}\u0026#34; --lifecycle-configuration \u0026#39;{\u0026#34;Rules\u0026#34;:[{\u0026#34;Prefix\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;Status\u0026#34;:\u0026#34;Enabled\u0026#34;,\u0026#34;Expiration\u0026#34;:{\u0026#34;Days\u0026#34;:400}}]}\u0026#39;    取得 bash aws s3api get-bucket-lifecycle-configuration --bucket \u0026#34;${BUCKET_NAME}\u0026#34;       参考   aws/s3api/put-bucket-encryption¶\n  aws/s3api/put-bucket-acl¶\n  aws/s3api/get-bucket-acl¶\n  aws/s3api/put-bucket-ownership-controls¶\n  aws/s3api/get-bucket-ownership-controls¶\n     ","permalink":"https://szk302.dev/posts/AWSCLI%E3%81%A7%E8%A1%8C%E3%81%86S3Bucket%E3%81%AE%E4%BD%9C%E6%88%90%E3%81%A8%E5%89%8A%E9%99%A4%E3%81%A8%E8%A8%AD%E5%AE%9A/","summary":"テストで使用するのでサクッと作りたいというご要望 方法 作成 bash BUCKET_NAME=\u0026#34;szk302.bucket\u0026#34; REGION=\u0026#34;ap-northeast-1\u0026#34; aws s3api create-bucket --bucket \u0026#34;${BUCKET_NAME}\u0026#34; --create-bucket-configuration \u0026#34;LocationConstraint=${REGION}\u0026#34; 削除 bash BUCKET_NAME=\u0026#34;szk302.bucket\u0026#34; aws s3api delete-bucket --bucket \u0026#34;${BUCKET_NAME}\u0026#34; Bucketを空にする bash BUCKET_NAME=\u0026#34;szk302.bucket\u0026#34; aws s3 rm \u0026#34;s3://${BUCKET_NAME}\u0026#34; --recursive 公開アクセ","title":"AWSCLIで行うS3Bucketの作成と削除と設定"},{"content":"Jsonを読み込んで加工したかったので調査\n json.ps1 $INPUT_FILE_PATH=\u0026#34;sample.json\u0026#34; $OUTPUT_FILE_PATH=\u0026#34;sample_cp.json\u0026#34; # json読み込み $jsonObj=(Get-Content -Path \u0026#34;${INPUT_FILE_PATH}\u0026#34; -Encodin UTF8 -Raw | ConvertFrom-Json) # プロパティの追加 $jsonObj | Add-Member -MemberType NoteProperty -Name \u0026#39;Key3\u0026#39; -Value \u0026#39;Added Value\u0026#39; # プロパティの削除 $jsonObj.psobject.properties.remove(\u0026#39;Key2\u0026#39;) # json書き出し ConvertTo-Json ${jsonObj} -Depth 32 | ForEach-Object { [Text.Encoding]::UTF8.GetBytes($_) } | Set-Content -Path \u0026#34;${OUTPUT_FILE_PATH}\u0026#34; -Encoding Byte   sample.json { \u0026#34;key\u0026#34;: \u0026#34;value\u0026#34;, \u0026#34;key2\u0026#34;: \u0026#34;ばりゅー\u0026#34; }   sample_cp.json { \u0026#34;key\u0026#34;: \u0026#34;value\u0026#34;, \u0026#34;Key3\u0026#34;: \u0026#34;Added Value\u0026#34; }     参考   PowerShell/Docs/PowerShell/スクリプトの作成/PSCustomObject について知りたかったことのすべて\n     ","permalink":"https://szk302.dev/posts/PowerShell%E3%81%A7%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%82%92%E8%BF%BD%E5%8A%A0%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B/PowerShell%E3%81%A7%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%82%92%E8%BF%BD%E5%8A%A0%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B/","summary":"Jsonを読み込んで加工したかったので調査 json.ps1 $INPUT_FILE_PATH=\u0026#34;sample.json\u0026#34; $OUTPUT_FILE_PATH=\u0026#34;sample_cp.json\u0026#34; # json読み込み $jsonObj=(Get-Content -Path \u0026#34;${INPUT_FILE_PATH}\u0026#34; -Encodin UTF8 -Raw | ConvertFrom-Json) # プロパティの追加 $jsonObj | Add-Member -MemberType NoteProperty -Name \u0026#39;Key3\u0026#39; -Value \u0026#39;Added Value\u0026#39; # プロパティの削除 $jsonObj.psobject.properties.remove(\u0026#39;Key2\u0026#39;)","title":"PowerShellでオブジェクトのプロパティを追加削除する"},{"content":"ConvertFrom-JsonでJSONからObjectにパースし、ConvertTo-JsonでJSONとしてBOMなしUTF-8でファイルに書き出す。\n json.ps1 $INPUT_FILE_PATH=\u0026#34;sample.json\u0026#34; $OUTPUT_FILE_PATH=\u0026#34;sample_cp.json\u0026#34; $jsonObj=(Get-Content -Path \u0026#34;${INPUT_FILE_PATH}\u0026#34; -Encodin UTF8 -Raw | ConvertFrom-Json) ConvertTo-Json ${jsonObj} -Depth 32 | ForEach-Object { [Text.Encoding]::UTF8.GetBytes($_) } | Set-Content -Path \u0026#34;${OUTPUT_FILE_PATH}\u0026#34; -Encoding Byte   sample.json { \u0026#34;key\u0026#34;: \u0026#34;value\u0026#34;, \u0026#34;key2\u0026#34;: \u0026#34;ばりゅー\u0026#34; }   sample_cp.json { \u0026#34;key\u0026#34;: \u0026#34;value\u0026#34;, \u0026#34;key2\u0026#34;: \u0026#34;ばりゅー\u0026#34; }     参考   stknohg/Write-BOMlessUTF8Sample.ps1\n     ","permalink":"https://szk302.dev/posts/PowerShell%E3%81%A7Json%E3%82%92%E8%AA%AD%E3%81%BF%E5%8F%96%E3%82%8AUTF-8%E3%81%AEBOM%E3%81%AA%E3%81%97%E3%81%A7%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AB%E6%9B%B8%E3%81%8D%E5%87%BA%E3%81%99/PowerShell%E3%81%A7Json%E3%82%92%E8%AA%AD%E3%81%BF%E5%8F%96%E3%82%8AUTF-8%E3%81%AEBOM%E3%81%AA%E3%81%97%E3%81%A7%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AB%E6%9B%B8%E3%81%8D%E5%87%BA%E3%81%99/","summary":"ConvertFrom-JsonでJSONからObjectにパースし、ConvertTo-JsonでJSONとしてBOMなしUTF-8でファ","title":"PowerShellでJSONを読み取りUTF-8のBOMなしでファイルに書き出す"},{"content":"ドライブ容量がギリギリになり容量を圧迫するnode_modulesを全部消したかったのでメモ\n   対応 findを使用してnode_modulesという名前のディレクトリを全部消去\n find ./ -type d -name node_modules -exec rm -rf {} \\;     ","permalink":"https://szk302.dev/posts/%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%88%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E4%BB%A5%E4%B8%8B%E3%81%AB%E5%AD%98%E5%9C%A8%E3%81%99%E3%82%8B%E3%81%82%E3%82%8B%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%82%92%E3%81%99%E3%81%B9%E3%81%A6%E6%B6%88%E3%81%97%E3%81%9F%E3%81%84/","summary":"ドライブ容量がギリギリになり容量を圧迫するnode_modulesを全部消したかったのでメモ 対応 findを使用してnode_modulesと","title":"カレントディレクトリ以下に存在するあるディレクトリをすべて消したい"},{"content":"AWSCodeBuildのプロジェクトをコピーしたいという要望があったのでCLIで実施\n   方法 AWS CLIでプロジェクト設定を取得し、登録できる形に変形させCLIから登録する。 コピー元のプロジェクトのロールがプロジェクト作成時にデフォルトで作成されたロール(コピー元のプロジェクト名入りのポリシーが付与されている)のため、そのままだと実行時にエラーとなる。 コピー先のプロジェクトのロールを指定できるようにした。\n sh srcProjectName=\u0026#34;コピー元プロジェクト名\u0026#34; dstProjectName=\u0026#34;コピー先プロジェクト名\u0026#34; dstProjectServiceRoleArn=\u0026#34;コピー先プロジェクトのサービスロールARN\u0026#34; aws codebuild batch-get-projects --names ${srcProjectName} | jq -r \u0026#34;.projects[0] | del (.arn, .created, .lastModified, .badge, .projectVisibility) | .name |=\\\u0026#34;${dstProjectName}\\\u0026#34; | .serviceRole |=\\\u0026#34;${dstProjectServiceRoleArn}\\\u0026#34;\u0026#34; \u0026gt; \u0026#34;${dstProjectName}.json\u0026#34; aws codebuild create-project --cli-input-json \u0026#34;file://${dstProjectName}.json\u0026#34; 1\u0026gt; /dev/null   Ex. srcProjectName=\u0026#34;sample-builder\u0026#34; dstProjectName=\u0026#34;sample-builder2\u0026#34; dstProjectServiceRoleArn=\u0026#34;arn:aws:iam::123456789012:role/service-role/codebuild-sample\u0026#34; aws codebuild batch-get-projects --names ${srcProjectName} | jq -r \u0026#34;.projects[0] | del (.arn, .created, .lastModified, .badge, .projectVisibility) | .name |=\\\u0026#34;${dstProjectName}\\\u0026#34; | .serviceRole |=\\\u0026#34;${dstProjectServiceRoleArn}\\\u0026#34;\u0026#34; \u0026gt; \u0026#34;${dstProjectName}.json\u0026#34; aws codebuild create-project --cli-input-json \u0026#34;file://${dstProjectName}.json\u0026#34; 1\u0026gt; /dev/null     参考   AWS CLI Command Reference/batch-get-projects\n  AWS CLI Command Reference/create-project.html\n     ","permalink":"https://szk302.dev/posts/AWSCodeBuild%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92CLI%E3%81%A7%E3%82%B3%E3%83%94%E3%83%BC%E3%81%99%E3%82%8B/","summary":"AWSCodeBuildのプロジェクトをコピーしたいという要望があったのでCLIで実施 方法 AWS CLIでプロジェクト設定を取得し、登録できる形に","title":"AWSCodeBuildのプロジェクトをCLIでコピーする"},{"content":"Cloudflare Workers上でWeb Crypto APIで公開鍵と秘密鍵を作成し、joseでJWTの作成と検証をしてみた。\n import { Hono } from \u0026#34;hono\u0026#34;; import { RegExpRouter } from \u0026#34;hono/router/reg-exp-router\u0026#34;; import {SignJWT, jwtVerify} from \u0026#34;jose\u0026#34;; export const app = new Hono({ router: new RegExpRouter() }); app.get(\u0026#34;/token\u0026#34;, async (c) =\u0026gt; { let token; let keyPair; let strPublicKey; try { keyPair = await crypto.subtle.generateKey( { name: \u0026#34;RSA-PSS\u0026#34;, modulusLength: 2048, //can be 1024, 2048, or 4096 publicExponent: new Uint8Array([0x01, 0x00, 0x01]), hash: { name: \u0026#34;SHA-256\u0026#34; }, //can be \u0026#34;SHA-1\u0026#34;, \u0026#34;SHA-256\u0026#34;, \u0026#34;SHA-384\u0026#34;, or \u0026#34;SHA-512\u0026#34; }, true, [\u0026#34;sign\u0026#34;, \u0026#34;verify\u0026#34;] ); let exported = await crypto.subtle.exportKey(\u0026#34;spki\u0026#34;, keyPair.publicKey); let exportedAsString = ab2str(exported); let exportedAsBase64 = btoa(exportedAsString); strPublicKey = `-----BEGIN PUBLIC KEY-----${exportedAsBase64}-----END PUBLIC KEY-----`; token = await new SignJWT({ \u0026#34;urn:example:claim\u0026#34;: true }) .setProtectedHeader({ alg: \u0026#34;PS256\u0026#34; }) // .setProtectedHeader({ alg: \u0026#34;PS512\u0026#34; }) .setIssuedAt() .setIssuer(\u0026#34;urn:example:issuer\u0026#34;) .setAudience(\u0026#34;urn:example:audience\u0026#34;) .setExpirationTime(\u0026#34;2h\u0026#34;) .sign(keyPair.privateKey); const { payload, protectedHeader } = await jwtVerify( token, keyPair.publicKey, { issuer: \u0026#34;urn:example:issuer\u0026#34;, audience: \u0026#34;urn:example:audience\u0026#34;, } ); return c.json({ token, payload, protectedHeader, publicKey: strPublicKey, }); } catch (e) { return c.html(JSON.stringify(e)); } }); function ab2str(buf) { return String.fromCharCode.apply(null, new Uint8Array(buf)); } export default app;   以下、実行した結果\n { \u0026#34;token\u0026#34;: \u0026#34;eyJhbGciOiJQUzI1NiJ9.eyJ1cm46ZXhhbXBsZTpjbGFpbSI6dHJ1ZSwiaWF0IjoxNjU2NTEyNzMwLCJpc3MiOiJ1cm46ZXhhbXBsZTppc3N1ZXIiLCJhdWQiOiJ1cm46ZXhhbXBsZTphdWRpZW5jZSIsImV4cCI6MTY1NjUxOTkzMH0.ENAV1ikjtBNxlysex3b2FTd7hyVeswRGPXqb9Bu2VcOkBKC_zps7ypzCaIKIsgZ4cX55oQwBxEQbdeY3gYUH9HUJDEdv1K7zRxVDbcuzilRGtgpXfeZg7ymRHjDZLhX8DQN5QinVH_pyypu4mu3yEOrR3DzTtsjajRpfUknTW5LptKlE90MZY7PETrDZQXz2-CrRflTGtAHuLUcBYC_VKJrXhMnCV412VXV62TsrOxHeW_8WzOBtDBscIV5H4qH_NFRrAzsx2rk1YD09rpIwFmtU0LYrbGItCqis07u0j29wmADLq2FKJBuDRHeiRpQGnOUQ258pnDdW0w_fIdOWbw\u0026#34;, \u0026#34;payload\u0026#34;: { \u0026#34;urn:example:claim\u0026#34;: true, \u0026#34;iat\u0026#34;: 1656512730, \u0026#34;iss\u0026#34;: \u0026#34;urn:example:issuer\u0026#34;, \u0026#34;aud\u0026#34;: \u0026#34;urn:example:audience\u0026#34;, \u0026#34;exp\u0026#34;: 1656519930 }, \u0026#34;protectedHeader\u0026#34;: { \u0026#34;alg\u0026#34;: \u0026#34;PS256\u0026#34; }, \u0026#34;publicKey\u0026#34;: \u0026#34;-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAhO/yo4bsP7Dtz/bFuleWo8y3sFCOFPDFZg5lSJsIU9OoXWZ+gFs31amWAmVsiVPhjAZY2y/RgsVAOHcVX+5k/aGXvLLhDGeyrfA7oLy6O7koMuTNkhz+LocHjw2Lku7iYduM4LKD7luRPm2sA+8hjXi0Z068vjRsfa1rIn9iMmWswG6lDPxA8XnTqsCcdQQUc3WZxDEetmxdmH61N2IWJZ39dWlo9bDlIoU79y9n0y2LfusByEBBEKDHL1+aB5Ua4xsXM/cGW8UZkGlMioo6v76nUWVgq24TCZFmR6M6MCk03pS4mup2fa+Nn7GqLet9/SHB+w7ZoZ38EJEUbRRCQQIDAQAB-----END PUBLIC KEY-----\u0026#34; }   jwt.ioでも検証してみた。\n     参考   MDN/Web Crypto API/SubtleCrypto.exportKey()\n  MDN/Web Crypto API/SubtleCrypto.generateKey()\n  panva/jose/Class: SignJWT\n  panva/jose/Function: jwtVerify\n  panva/jose/test-cloudflare-workers/cloudflare.test.mjs\n  panva/jose/Cloudflare Workers Support #265\n  JSON Web Algorithms (JWA) # 3.1. \u0026#34;alg\u0026#34; (Algorithm) Header Parameter Values for JWS\n  JSON Object Signing and Encryption (JOSE) # JSON Web Signature and Encryption Algorithms\n  JWTs: Which Signing Algorithm Should I Use?\n     ","permalink":"https://szk302.dev/posts/CloudflareWorkers%E4%B8%8A%E3%81%A7WebCryptoAPI%E3%81%A8jose%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6JWT%E3%81%AE%E4%BD%9C%E6%88%90%E3%81%A8%E6%A4%9C%E8%A8%BC%E3%82%92%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/","summary":"Cloudflare Workers上でWeb Crypto APIで公開鍵と秘密鍵を作成し、joseでJWTの作成と検証をしてみた。 import { Hono } from \u0026#34;hono\u0026#34;; import { RegExpRouter } from \u0026#34;hono/router/reg-exp-router\u0026#34;; import {SignJWT, jwtVerify} from \u0026#34;jose\u0026#34;; export const app","title":"CloudflareWorkers上でWebCryptoAPIとjoseを使用してJWTの作成と検証をしてみる"},{"content":"前回以下のコマンドでサンプルプロジェクトを作成したが、そのままではテストが通らなかった。 また、全部のパスを通るテストを追加してみたがカバレッジが100%に上がらなかったので対応\n console npx create-cloudflare sample-hono https://github.com/honojs/hono-minimal   そのまま実行した場合以下のようにエラーが出力された。\n console root@5ad01add5449:/workspace/sample-hono2# npm run test \u0026gt; hono-minimal@0.0.1 test \u0026gt; jest --verbose FAIL src/index.test.ts ● Test suite failed to run ENOENT: no such file or directory, open \u0026#39;/workspace/sample-hono/dist/index.js\u0026#39; Test Suites: 1 failed, 1 total Tests: 0 total Snapshots: 0 total Time: 5.37 s   またカバレッジは以下の通り\n console root@5ad01add5449:/workspace/sample-hono# npm run test \u0026gt; sample-hono@0.0.1 test \u0026gt; jest --verbose --coverage PASS src/index.test.ts (9.735 s) Test the application ✓ Should return 200 response (10 ms) ✓ Should return 401 response (1 ms) ✓ Should return 200 response (18 ms) ✓ Should return 200 response (2 ms) ✓ Should return 201 response (3 ms) ----------|---------|----------|---------|---------|------------------- File | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s ----------|---------|----------|---------|---------|------------------- All files | 97.67 | 72.72 | 90.9 | 97.36 | index.ts | 97.67 | 72.72 | 90.9 | 97.36 | 21 ----------|---------|----------|---------|---------|------------------- Test Suites: 1 passed, 1 total Tests: 5 passed, 5 total Snapshots: 0 total Time: 16.498 s Ran all test suites.     対応 修正箇所は以下2つ\n   package.jsonのmainをsrc/index.tsに変更\n  esbuild-jestの設定にsourcemapを追記(※カバレッジ対応)\n   package.json { \u0026#34;name\u0026#34;: \u0026#34;sample-hono\u0026#34;, \u0026#34;private\u0026#34;: true, \u0026#34;version\u0026#34;: \u0026#34;0.0.1\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;src/index.ts\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;jest --verbose --coverage\u0026#34;, \u0026#34;dev\u0026#34;: \u0026#34;wrangler dev src/index.ts\u0026#34;, \u0026#34;deploy\u0026#34;: \u0026#34;wrangler publish src/index.ts --minify\u0026#34;, \u0026#34;wrangler\u0026#34;: \u0026#34;wrangler\u0026#34; }, \u0026#34;license\u0026#34;: \u0026#34;MIT\u0026#34;, \u0026#34;dependencies\u0026#34;: { \u0026#34;hono\u0026#34;: \u0026#34;^1.5.0\u0026#34; }, \u0026#34;devDependencies\u0026#34;: { \u0026#34;@cloudflare/workers-types\u0026#34;: \u0026#34;^3.10.0\u0026#34;, \u0026#34;@types/jest\u0026#34;: \u0026#34;^28.1.0\u0026#34;, \u0026#34;esbuild\u0026#34;: \u0026#34;0.14.47\u0026#34;, \u0026#34;esbuild-jest\u0026#34;: \u0026#34;0.5.0\u0026#34;, \u0026#34;jest\u0026#34;: \u0026#34;^28.1.1\u0026#34;, \u0026#34;jest-environment-miniflare\u0026#34;: \u0026#34;^2.5.1\u0026#34;, \u0026#34;miniflare\u0026#34;: \u0026#34;^2.5.0\u0026#34;, \u0026#34;wrangler\u0026#34;: \u0026#34;^2.0.14\u0026#34; } }   jest.config.js module.exports = { testEnvironment: \u0026#34;miniflare\u0026#34;, testMatch: [ \u0026#34;**/test/**/*.+(ts|tsx|js)\u0026#34;, \u0026#34;**/src/**/(*.)+(spec|test).+(ts|tsx|js)\u0026#34;, ], transform: { \u0026#34;^.+\\\\.(ts|tsx)$\u0026#34;: [ \u0026#34;esbuild-jest\u0026#34;, { sourcemap: true }, ], }, coverageDirectory: \u0026#34;reports/coverage\u0026#34;, collectCoverage: true, coverageReporters: [\u0026#34;json\u0026#34;, \u0026#34;lcov\u0026#34;, \u0026#34;text\u0026#34;, \u0026#34;html\u0026#34;], collectCoverageFrom: [\u0026#34;src/**/*.ts\u0026#34;, \u0026#34;!**/node_modules/**\u0026#34;], };     結果 console root@5ad01add5449:/workspace/sample-hono# npm run test \u0026gt; sample-hono@0.0.1 test \u0026gt; jest --verbose --coverage PASS src/index.test.ts (12.36 s) Test the application ✓ Should return 200 response (9 ms) ✓ Should return 401 response (2 ms) ✓ Should return 200 response (23 ms) ✓ Should return 200 response (10 ms) ✓ Should return 201 response (3 ms) ----------|---------|----------|---------|---------|------------------- File | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s ----------|---------|----------|---------|---------|------------------- All files | 100 | 100 | 100 | 100 | index.ts | 100 | 100 | 100 | 100 | ----------|---------|----------|---------|---------|------------------- Test Suites: 1 passed, 1 total Tests: 5 passed, 5 total Snapshots: 0 total Time: 24.842 s Ran all test suites.     参考   aelbore/esbuild-jest\n  esbuild/API # Loader\n     ","permalink":"https://szk302.dev/posts/Hono%E3%81%AE%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%A7%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E9%80%9A%E3%81%99/","summary":"前回以下のコマンドでサンプルプロジェクトを作成したが、そのままではテストが通らなかった。 また、全部のパスを通るテストを追加してみたがカバレッ","title":"Honoのサンプルプロジェクトでテストを通す"},{"content":"プロジェクトの作成 console npx create-cloudflare sample-hono https://github.com/honojs/hono-minimal   以下、作成されたディレクトリ構造\n console root@5ad01add5449:/workspace# tree sample-hono sample-hono |-- README.md |-- jest.config.js |-- package.json |-- src | |-- index.test.ts | `-- index.ts `-- wrangler.toml   依存モジュールをインストール\n console root@5ad01add5449:/workspace/sample-hono# npm i   console root@5ad01add5449:/workspace/sample-hono# npm run dev \u0026gt; hono-minimal@0.0.1 dev \u0026gt; wrangler dev src/index.ts ⛅️ wrangler 2.0.15 -------------------- Attempting to login via OAuth... Opening a link in your default browser: https://dash.cloudflare.com/oauth2/auth?response_type=code\u0026amp;client_id=...省略   ブラウザを開き上記のURLを叩いてCloudflareにログインする\n console C:\\Users\\szk\u0026gt;curl http://localhost:35915/ \u0026lt;h1\u0026gt;Hello Hono!\u0026lt;/h1\u0026gt;     デプロイする console npm run deploy   以下のエンドポイントのworkerが作成された\n   hono-minimal.szk302.workers.dev\n   sample-honoというWorker名にしたいため、wrangler.tomlのnameを書き換えた。\n wrangler.toml name=\u0026#34;sample-hono\u0026#34; workers_dev = true compatibility_date = \u0026#34;2022-02-03\u0026#34;   もう一度デプロイ\n console npm run deploy   cmd C:\\Users\\szk\u0026gt;curl https://sample-hono.szk302.workers.dev/ \u0026lt;h1\u0026gt;Hello Hono!\u0026lt;/h1\u0026gt;     参考   Cloudflare Workersフレームワーク「Hono」の紹介\n  honojs/hono\n  Workers/Configuration\n     ","permalink":"https://szk302.dev/posts/CloudflareWorkers%E3%81%A7Hono%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/","summary":"プロジェクトの作成 console npx create-cloudflare sample-hono https://github.com/honojs/hono-minimal 以下、作成されたディレクトリ構造 console root@5ad01add5449:/workspace# tree sample-hono sample-hono |-- README.md |-- jest.config.js |-- package.json |-- src | |-- index.test.ts | `-- index.ts `-- wrangler.toml 依存モジュールをインストール console root@5ad01add5449:/workspace/sample-hono# npm i console","title":"CloudflareWorkersでHonoを試してみる"},{"content":"AWSのEC2に対してSessonManager経由で接続しdevcontainerを使用したい。\n     環境 ローカル   OS: Windows 10 Home\n  VSCode: 1.68.1\n  AWS CLI: 2.4.18\n  Session Manager plugin: 1.2.295.0\n    リモート   OS: Amazon Linux 2 Kernel 5.10\n  AMI: ami-0b7546e839d7ace12\n  インスタンスタイプ: t3.large\n  microはタイムアウトした\n         対応 EC2にDockerを入れてlocalのSSHの設定にProxyCommandを指定するだけ。 ローカルにDockerは必要ないそう。\n 以下、設定の流れ\n  VSCodeの Remote Development using SSH でリモート接続\n  リモート接続したEC2に Docker と docker-compose をインストール\n  devcontainerを起動\n   1. VSCodeの Remote Development using SSH でリモート接続 準備  SMSMがオンラインになるようEC2を起動\n  ※ロールに注意\n     ~/.ssh/configに接続対象の設定を以下のように追記\n   Host ec2 User ec2-user Port 22 ProxyCommand powershell.exe aws ssm start-session --target %h --document-name AWS-StartSSHSession --parameters portNumber=%p HostName ${インスタンスID} IdentityFile ${秘密鍵のパス}   example Host ec2 User ec2-user Port 22 ProxyCommand powershell.exe aws ssm start-session --target %h --document-name AWS-StartSSHSession --parameters portNumber=%p HostName i-07ee5a633624f8c9c IdentityFile ~/.ssh/aws_szk302.pem    接続 リモートエクスプローラからSSHターゲットを選択し、SSHのconfigに設定したhostを選択して接続する。\n   2. リモート接続したEC2に Docker と docker-compose をインストール  Dockerをインストール \n   sudo amazon-linux-extras install docker -y sudo usermod -aG docker $USER sudo systemctl enable docker sudo systemctl start docker    docker-composeをインストール\n   sudo curl -L --fail https://github.com/docker/compose/releases/download/1.29.2/run.sh -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose     Tip  docker-composeはv1系が必要(docker-composeコマンドが使える必要がある) TIP: インストールしたら再接続すること      3. devcontainerを起動 devcontainerを準備\n devcontainer .devcontainer ├── Dockerfile ├── devcontainer.json └── docker-compose.yml   F1からいつも通りコンテナ環境を開く\n    参考   Develop on a remote Docker host # Connect using the Remote - SSH extension (recommended)\n  Install Docker Compose\n     ","permalink":"https://szk302.dev/posts/AWSEC2%E3%81%ABSSM%E7%B5%8C%E7%94%B1%E3%81%A7VSCode%E3%81%AEdevcontainer%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B/","summary":"AWSのEC2に対してSessonManager経由で接続しdevcontainerを使用したい。 環境 ローカル OS: Windows 10 Home VSCode: 1.68.1 AWS CLI: 2.4.18 Session Manager plugin: 1.2.295.0 リモ","title":"AWSEC2にSSM経由でVSCodeのdevcontainerを使用する"},{"content":"CloudflarePagesを利用してGatsbyビルド時に以下のエラーが発生した。\n 07:43:59.243\terror gatsby@4.15.2: The engine \u0026#34;node\u0026#34; is incompatible with this module. Expected version \u0026#34;\u0026gt;=14.15.0\u0026#34;. Got \u0026#34;12.18.0\u0026#34; 07:43:59.253\terror Found incompatible module.   Cloudflareの2022/06/18時点のNode.jsのデフォルトのバージョンは 12.18.0\n   対応 .node-version 16.15.1   他の対応方法としては .nvmrc ファイルや環境変数 NODE_VERSION の指定方法が対応しているようだ。\n   参考   Cloudflare Docs/Pages # Language support and tools\n     ","permalink":"https://szk302.dev/posts/CloudflarePages%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89%E6%99%82%E3%81%ABNode%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B/","summary":"CloudflarePagesを利用してGatsbyビルド時に以下のエラーが発生した。 07:43:59.243 error gatsby@4.15.2: The engine \u0026#34;node\u0026#34; is incompatible with this module. Expected version \u0026#34;\u0026gt;=14.15.0\u0026#34;. Got \u0026#34;12.18.0\u0026#34; 07:43:59.253 error Found incompatible module. Cloudf","title":"CloudflarePagesでビルド時にNodeのバージョンを指定する"},{"content":"devcontainerでgatsbyを利用時にコンテナ再作成してから yarn start すると以下の表示がでる。\n ╔════════════════════════════════════════════════════════════════════════╗ ║ ║ ║ Gatsby collects anonymous usage analytics ║ ║ to help improve Gatsby for all users. ║ ║ ║ ║ If you\u0026#39;d like to opt-out, you can use `gatsby telemetry --disable` ║ ║ To learn more, checkout https://gatsby.dev/telemetry ║ ║ ║ ╚════════════════════════════════════════════════════════════════════════╝   gatsby telemetry --disable を実行すると ~/.config/gatsby/config.json に値が設定され次回以降表示が消えるのだが、コンテナ作り直すと設定ファイルごと消えるため、毎回出てしまう。\n 環境変数に以下の設定を行い表示されないようにする。\n   GATSBY_TELEMETRY_DISABLED=1\n     対応 Dockerfileに以下のように環境変数を追記\n FROM node:16.15.1 ENV GATSBY_TELEMETRY_DISABLED=1     参考   Telemetry\n     ","permalink":"https://szk302.dev/posts/devcontainer%E3%81%A7Gatsby%E3%81%AETelemetry%E3%81%AE%E8%A1%A8%E7%A4%BA%E3%82%92off%E3%81%AB%E3%81%99%E3%82%8B/","summary":"devcontainerでgatsbyを利用時にコンテナ再作成してから yarn start すると以下の表示がでる。 ╔════════════════════","title":"devcontainerでGatsbyのTelemetryの表示をoffにする"},{"content":"環境   yarn: 1.22.19\n     方法 以下のコマンドで確認する\n yarn list --pattern \u0026#39;パッケージ名1|パッケージ名2\u0026#39;   \u0026gt; yarn list --pattern \u0026#39;@aws-sdk/client-s3|@aws-sdk/s3-request-presigner\u0026#39; yarn list v1.22.19 ├─ @aws-sdk/client-s3@3.107.0 └─ @aws-sdk/s3-request-presigner@3.107.0 Done in 1.16s.     参考   yarn list\n     ","permalink":"https://szk302.dev/posts/yarn%E3%81%A7%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E6%B8%88%E3%81%BF%E3%81%AE%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B/","summary":"環境 yarn: 1.22.19 方法 以下のコマンドで確認する yarn list --pattern \u0026#39;パッケージ名1|パッケージ名2\u0026#39; \u0026gt; yarn list --pattern \u0026#39;@aws-sdk/client-s3|@aws-sdk/s3-request-presigner\u0026#39; yarn list v1.22.19 ├─ @aws-sdk/client-s3@3.107.0 └─ @aws-sdk/s3-request-presigner@3.107.0 Done in 1.16s. 参考 yarn list","title":"yarnでインストール済みのパッケージを確認する"},{"content":"v2での作り方は転がってるが、v3での作り方がわからず若干ハマったのでメモ\n   パッケージインストール yarn add @aws-sdk/client-s3 @aws-sdk/s3-request-presigner     環境 \u0026gt;yarn list --pattern @aws-sdk/client-s3 @aws-sdk/s3-request-presigner yarn list v1.22.19 warning Filtering by arguments is deprecated. Please use the pattern option instead. ├─ @aws-sdk/client-s3@3.107.0 └─ @aws-sdk/s3-request-presigner@3.107.0 Done in 1.13s     対応 BackBlazeB2の keyID をアクセスキーに、applicationKey をシークレットアクセスキーに、バケットのEndpointをエンドポイントに設定して作成する\n 以下作成したコード\n /main.ts import Client from \u0026#34;./BucketClinet\u0026#34;; const client = new Client(accessKey, secretAccessKey, endpoint); url = await client.getPreSignedUrl(env.BUCKET_NAME, \u0026#34;public/sample.png\u0026#34;);   BucketClient.ts import { S3Client, S3ClientConfig, PutObjectCommand } from \u0026#34;@aws-sdk/client-s3\u0026#34;; import { getSignedUrl } from \u0026#34;@aws-sdk/s3-request-presigner\u0026#34;; export default class BucketClient { private s3ClientConfig: S3ClientConfig; constructor( private accessKey: string, private secretAccessKey: string, private endpoint: string ) { this.s3ClientConfig = { endpoint: { hostname: this.endpoint, protocol: \u0026#34;https\u0026#34;, path: \u0026#34;/\u0026#34; }, // 未指定の場合PreSignedUrlにホスト名が含まれない forcePathStyle: true, // 未指定の場合エラーになるため指定 region: \u0026#34;ap-northeast-1\u0026#34;, credentials: { accessKeyId: this.accessKey, secretAccessKey: this.secretAccessKey, }, }; } public async getPreSignedUrl( bucket: string, key: string, expiresIn: number = 3600 ) { const bucketParams = { Bucket: bucket, Key: key, }; const s3Client: S3Client = new S3Client(this.s3ClientConfig); const command = new PutObjectCommand(bucketParams); return getSignedUrl(s3Client, command, { expiresIn: expiresIn, }); } }    Note    S3ClientConfigの region はカスタムエンドポイントを使用する場合でも指定しないとエラーになる\n  S3ClientConfigの forcePathStyle を指定しないとpresigned URLのエンドポイント部分が空になる\n        確認 vscodeのRestClientで確認\n presigned.http PUT ${PRESIGNED_URL} content-type: image/png \u0026lt; ./sample.png     参考   Module @aws-sdk/s3-request-presigner\n  S3 Client - AWS SDK for JavaScript v3\n  Interface S3ClientConfig\n  Interface EndpointsInputConfig\n  Custom endpoint not used when bucketEndpoint is true #3031\n     ","permalink":"https://szk302.dev/posts/AWSSDKJavaScriptV3%E3%81%A7BackblazeB2%E3%81%AEpresignedURL%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/","summary":"v2での作り方は転がってるが、v3での作り方がわからず若干ハマったのでメモ パッケージインストール yarn add @aws-sdk/client-s3 @aws-sdk/s3-request-presigner 環境 \u0026gt;yarn list --pattern @aws-sdk/client-s3 @aws-sdk/s3-request-presigner yarn list v1.22.19 warning Filtering by arguments is deprecated. Please use","title":"AWSSDKJavaScriptV3でBackblazeB2のpresignedURLを作成する"},{"content":"Gatsbyのプロジェクトを新規作成したところ、tsxファイルを編集してもホットリロードが効かない。 2.X.X時代のプロジェクトでは効いていた。\n   環境   Microsoft Windows 10 Home\n  WSL 2\n  Node.js: 14.19.3\n  Gatsby: 4.16.0\n     対応 環境変数に WATCHPACK_POLLING=true を追加\n   Note  CHOKIDAR_USEPOLLING=true は効果がなかった。     時間の関係上原因は調査せず\n   ","permalink":"https://szk302.dev/posts/Gatsby%E3%81%A7tsx%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E3%83%9B%E3%83%83%E3%83%88%E3%83%AA%E3%83%AD%E3%83%BC%E3%83%89%E3%81%8C%E5%8A%B9%E3%81%8B%E3%81%AA%E3%81%84/","summary":"Gatsbyのプロジェクトを新規作成したところ、tsxファイルを編集してもホットリロードが効かない。 2.X.X時代のプロジェクトでは効いてい","title":"Gatsbyでtsxファイルのホットリロードが効かない"},{"content":"Test-Path を使用する。\n 存在するか確認 $file_path = \u0026#34;test.txt\u0026#34;; if(Test-Path $file_path) { echo \u0026#34;存在する\u0026#34;; };   存在しないか確認 $file_path = \u0026#34;test.txt\u0026#34;; if((Test-Path $file_path) -ne \u0026#34;True\u0026#34;) { echo \u0026#34;存在しない\u0026#34;; };   存在しないか確認(not論理演算子Ver) $file_path = \u0026#34;test.txt\u0026#34;; if(-not (Test-Path $file_path)) { echo \u0026#34;存在しない\u0026#34;; };     参考   Test-Path\n  https://docs.microsoft.com/ja-jp/powershell/scripting/learn/deep-dives/everything-about-if?view=powershell-7.2#-not\n     ","permalink":"https://szk302.dev/posts/PowerShell%E3%81%A7%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%84%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AE%E5%AD%98%E5%9C%A8%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF/","summary":"Test-Path を使用する。 存在するか確認 $file_path = \u0026#34;test.txt\u0026#34;; if(Test-Path $file_path) { echo \u0026#34;存在する\u0026#34;; }; 存在しないか確認 $file_path = \u0026#34;test.txt\u0026#34;; if((Test-Path $file_path) -ne \u0026#34;True\u0026#34;) { echo \u0026#34;存在しない\u0026#34;;","title":"PowerShellでファイルやディレクトリの存在チェック"},{"content":"方法 オプション -Recurse,-Force をつける\n  -Recurse  サブディレクトリごと削除\n -Force  隠しファイルや読み取り専用ファイルを削除\n   Remove-Item xyz -Recurse -Force   ただし、ファイルやディレクトリが存在しない場合エラーになる。\n PS C:\\Users\\szk\\work\u0026gt; Remove-item none -Recurse -Force Remove-Item : パス \u0026#39;C:\\Users\\szk\\work\\none\u0026#39; が存在しないため検出できません。 発生場所 行:1 文字:1 + Remove-item none -Recurse -Force + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : ObjectNotFound: (C:\\Users\\szk\\work\\none:String) [Remove-Item], ItemNotFoundException + FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.RemoveItemCommand   エラーにさせない方法はif文で判定する方法しか見つけられなかった。\n $file_path=\u0026#34;none\u0026#34;; if (Test-Path $file_path) { Remove-Item $file_path -Recurse -Force };     参考   Remove-Item\n     ","permalink":"https://szk302.dev/posts/PowerShell%E3%81%A7%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%84%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E3%82%92%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B/","summary":"方法 オプション -Recurse,-Force をつける -Recurse サブディレクトリごと削除 -Force 隠しファイルや読み取り専用ファイルを削除 Remove-Item xyz -Recurse -Force ただし、ファイルやディレクトリが存在しな","title":"PowerShellでファイルやフォルダを削除する"},{"content":"いつも日本語版AMIを探し回るのでメモ\n   方法 フィルター部分のOSのバージョン(年)を変えれば対象バージョンの最新のAMIが取得できる\n cmd aws ec2 describe-images --region ap-northeast-1 --owners amazon --query \u0026#34;reverse(sort_by(Images, \u0026amp;CreationDate))[:1]\u0026#34; --filters \u0026#34;Name=name,Values=Windows_Server-2022-*Japanese*Base*\u0026#34; --output json   console [ { \u0026#34;Architecture\u0026#34;: \u0026#34;x86_64\u0026#34;, \u0026#34;CreationDate\u0026#34;: \u0026#34;2022-05-25T06:11:35.000Z\u0026#34;, \u0026#34;ImageId\u0026#34;: \u0026#34;ami-0672428f1d276c81d\u0026#34;, \u0026#34;ImageLocation\u0026#34;: \u0026#34;amazon/Windows_Server-2022-Japanese-Full-Base-2022.05.25\u0026#34;, \u0026#34;ImageType\u0026#34;: \u0026#34;machine\u0026#34;, \u0026#34;Public\u0026#34;: true, \u0026#34;OwnerId\u0026#34;: \u0026#34;801119661308\u0026#34;, \u0026#34;Platform\u0026#34;: \u0026#34;windows\u0026#34;, \u0026#34;PlatformDetails\u0026#34;: \u0026#34;Windows\u0026#34;, \u0026#34;UsageOperation\u0026#34;: \u0026#34;RunInstances:0002\u0026#34;, \u0026#34;State\u0026#34;: \u0026#34;available\u0026#34;, \u0026#34;BlockDeviceMappings\u0026#34;: [ { \u0026#34;DeviceName\u0026#34;: \u0026#34;/dev/sda1\u0026#34;, \u0026#34;Ebs\u0026#34;: { \u0026#34;DeleteOnTermination\u0026#34;: true, \u0026#34;SnapshotId\u0026#34;: \u0026#34;snap-030270ea0f06d1e8e\u0026#34;, \u0026#34;VolumeSize\u0026#34;: 30, \u0026#34;VolumeType\u0026#34;: \u0026#34;gp2\u0026#34;, \u0026#34;Encrypted\u0026#34;: false } }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdca\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral0\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdcb\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral1\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdcc\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral2\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdcd\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral3\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdce\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral4\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdcf\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral5\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdcg\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral6\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdch\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral7\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdci\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral8\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdcj\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral9\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdck\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral10\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdcl\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral11\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdcm\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral12\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdcn\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral13\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdco\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral14\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdcp\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral15\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdcq\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral16\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdcr\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral17\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdcs\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral18\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdct\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral19\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdcu\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral20\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdcv\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral21\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdcw\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral22\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdcx\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral23\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdcy\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral24\u0026#34; }, { \u0026#34;DeviceName\u0026#34;: \u0026#34;xvdcz\u0026#34;, \u0026#34;VirtualName\u0026#34;: \u0026#34;ephemeral25\u0026#34; } ], \u0026#34;Description\u0026#34;: \u0026#34;Microsoft Windows Server 2022 Full Locale Japanese AMI provided by Amazon\u0026#34;, \u0026#34;EnaSupport\u0026#34;: true, \u0026#34;Hypervisor\u0026#34;: \u0026#34;xen\u0026#34;, \u0026#34;ImageOwnerAlias\u0026#34;: \u0026#34;amazon\u0026#34;, \u0026#34;Name\u0026#34;: \u0026#34;Windows_Server-2022-Japanese-Full-Base-2022.05.25\u0026#34;, \u0026#34;RootDeviceName\u0026#34;: \u0026#34;/dev/sda1\u0026#34;, \u0026#34;RootDeviceType\u0026#34;: \u0026#34;ebs\u0026#34;, \u0026#34;SriovNetSupport\u0026#34;: \u0026#34;simple\u0026#34;, \u0026#34;VirtualizationType\u0026#34;: \u0026#34;hvm\u0026#34;, \u0026#34;DeprecationTime\u0026#34;: \u0026#34;2024-05-25T06:11:35.000Z\u0026#34; } ]   AMIのIDだけ取得\n cmd aws ec2 describe-images --region ap-northeast-1 --owners amazon --query \u0026#34;reverse(sort_by(Images, \u0026amp;CreationDate))[:1]\u0026#34; --filters \u0026#34;Name=name,Values=Windows_Server-2022-*Japanese*Base*\u0026#34; --output json | jq -r \u0026#34;.[0].ImageId\u0026#34;     参考   AWS CLI Command Reference/aws ec2/describe-images\n     ","permalink":"https://szk302.dev/posts/AWSCLI%E3%81%A7Amazon%E5%85%AC%E5%BC%8F%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E%E7%89%88WindowsServerAMI%E3%81%AE%E6%83%85%E5%A0%B1%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/","summary":"いつも日本語版AMIを探し回るのでメモ 方法 フィルター部分のOSのバージョン(年)を変えれば対象バージョンの最新のAMIが取得できる cmd aws ec2 describe-images --region","title":"AWSCLIでAmazon公式の日本語版WindowsServerAMIの情報を取得する"},{"content":"chocolateyやwingetが使用禁止のためpowershellでインストールする\n install_sakura.ps1 $INSTALLER_FILE_NAME = \u0026#34;sakura_installer.exe\u0026#34;; $INSTALLER_ZIP_FILE_NAME = \u0026#34;sakura_installer.zip\u0026#34; $INSTALLER_URL = \u0026#34;https://github.com/sakura-editor/sakura/releases/download/v2.4.1/sakura-tag-v2.4.1-build2849-ee8234f-Win32-Release-Installer.zip\u0026#34; $current_dir_path = $PSScriptRoot; $tmp_dir_path = \u0026#34;$env:TEMP/\u0026#34; + (Get-Date).ToString(\u0026#34;yyyyMMdd_HHmmssfff\u0026#34;); New-Item \u0026#34;${tmp_dir_path}\u0026#34; -ItemType Directory Invoke-WebRequest \u0026#34;${INSTALLER_URL}\u0026#34; -OutFile ${tmp_dir_path}/${INSTALLER_ZIP_FILE_NAME}; Expand-Archive -Path ${tmp_dir_path}/${INSTALLER_ZIP_FILE_NAME} -DestinationPath ${tmp_dir_path}; Move-Item ${tmp_dir_path}/*.exe ${tmp_dir_path}/${INSTALLER_FILE_NAME} Start-Process -FilePath ${tmp_dir_path}\\${INSTALLER_FILE_NAME} -Args \u0026#34;/SP- /VERYSILENT /NORESTART /MERGETASKS=\u0026#34;\u0026#34;desktopicon\u0026#34;\u0026#34; /LOG=${current_dir_path}/${INSTALLER_FILE_NAME}.log\u0026#34; -Verb RunAs -Wait; Remove-Item \u0026#34;${tmp_dir_path}\u0026#34; -Recurse     参考   [5743] サイレントインストールについて\n     ","permalink":"https://szk302.dev/posts/Windows%E3%81%ABPowerShell%E3%81%A7%E3%82%B5%E3%82%AF%E3%83%A9%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF%E3%82%92%E3%82%B5%E3%82%A4%E3%83%AC%E3%83%B3%E3%83%88%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B/","summary":"chocolateyやwingetが使用禁止のためpowershellでインストールする install_sakura.ps1 $INSTALLER_FILE_NAME = \u0026#34;sakura_installer.exe\u0026#34;; $INSTALLER_ZIP_FILE_NAME = \u0026#34;sakura_installer.zip\u0026#34; $INSTALLER_URL = \u0026#34;https://github.com/sakura-editor/sakura/releases/download/v2.4.1/sakura-tag-v2.4.1-build2849-ee8234f-Win32-Release-Installer.zip\u0026#34; $current_dir_path = $PSScriptRoot; $tmp_dir_path = \u0026#34;$env:TEMP/\u0026#34; + (Get-Date).ToString(\u0026#34;yyyyMMdd_HHmmssfff\u0026#34;); New-Item \u0026#34;${tmp_dir_path}\u0026#34; -ItemType Directory Invoke-WebRequest \u0026#34;${INSTALLER_URL}\u0026#34; -OutFile ${tmp_dir_path}/${INSTALLER_ZIP_FILE_NAME};","title":"WindowsにPowerShellでサクラエディタをサイレントインストールする"},{"content":"chocolateyやwingetが使用禁止のためpowershellでインストールする\n install_vscode.ps1 $INSTALLER_FILE_NAME = \u0026#34;vscode_installer.exe\u0026#34;; $INSTALLER_VERSION = \u0026#34;latest\u0026#34;; $current_dir_path = $PSScriptRoot; $tmp_dir_path = \u0026#34;$env:TEMP/\u0026#34; + (Get-Date).ToString(\u0026#34;yyyyMMdd_HHmmssfff\u0026#34;); $installer_file_path = \u0026#34;${tmp_dir_path}/${INSTALLER_FILE_NAME}\u0026#34; New-Item -ItemType Directory ${tmp_dir_path}; Invoke-WebRequest \u0026#34;https://update.code.visualstudio.com/${INSTALLER_VERSION}/win32-x64/stable\u0026#34; -OutFile ${installer_file_path}; Start-Process -FilePath ${installer_file_path} -Args \u0026#34;/VERYSILENT /NORESTART /MERGETASKS=!runcode,desktopicon,addcontextmenufiles,addcontextmenufolders,associatewithfiles,addtopath /LOG=${current_dir_path}/vscode_installer.log\u0026#34; -Verb RunAs -Wait; Remove-Item ${tmp_dir_path} -Recurse -Force     参考   Visual Studio Code Silent Install (How-To Guide)\n  Visual Studio Codeのサイレントインストール\n     ","permalink":"https://szk302.dev/posts/Windows%E3%81%ABPowerShell%E3%81%A7VSCode%E3%82%92%E3%82%B5%E3%82%A4%E3%83%AC%E3%83%B3%E3%83%88%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B/","summary":"chocolateyやwingetが使用禁止のためpowershellでインストールする install_vscode.ps1 $INSTALLER_FILE_NAME = \u0026#34;vscode_installer.exe\u0026#34;; $INSTALLER_VERSION = \u0026#34;latest\u0026#34;; $current_dir_path = $PSScriptRoot; $tmp_dir_path = \u0026#34;$env:TEMP/\u0026#34; + (Get-Date).ToString(\u0026#34;yyyyMMdd_HHmmssfff\u0026#34;); $installer_file_path = \u0026#34;${tmp_dir_path}/${INSTALLER_FILE_NAME}\u0026#34; New-Item -ItemType Directory ${tmp_dir_path}; Invoke-WebRequest \u0026#34;https://update.code.visualstudio.com/${INSTALLER_VERSION}/win32-x64/stable\u0026#34; -OutFile ${installer_file_path};","title":"WindowsにPowerShellでVSCodeをサイレントインストールする"},{"content":"A5M2で生成されたSQLをコマンドラインから実行する。 実行方法はコマンドラインツールのzipを解凍すると一緒に入っているa5m2cmd.ja.txtに記載されていた。\n   環境 コマンド実行環境   Microsoft WIndows Server 2019 Datacentor\n    DB   Amazon RDS Aurora PostgreSQL(11.15)\n      方法 以下のように実行\n A5M2cmd \u0026#34;/Connect=__ConnectionType=Internal;ProviderName=PostgreSQL;UserName=${user_name};Password=${user_pass};ServerName=${db_endpoint};Port=${db_port};Database=${db_name};ProtocolVersion=30\u0026#34; /RunSQL /InEncoding=UTF-8 \u0026#34;/FileName=${sql_file_path}\u0026#34;   セパレータを変えている場合はオプションで指定する。  トリガー用のSQLファイルに / が指定されていた。\n A5M2cmd \u0026#34;/Connect=__ConnectionType=Internal;ProviderName=PostgreSQL;UserName=${user_name};Password=${user_pass};ServerName=${db_endpoint};Port=${db_port};Database=${db_name};ProtocolVersion=30\u0026#34; /RunSQL /Separator=Slash /InEncoding=UTF-8 \u0026#34;/FileName=${sql_file_path}\u0026#34;     TODO プロシージャ用のSQLファイルは実行できなかった。 時間切れのため未調査\n   参考   A5:SQL Mk-2 コマンドラインユーティリティ\n  SQLの実行モード（実行位置）の設定\n     ","permalink":"https://szk302.dev/posts/A5M2%E3%81%A7%E4%BD%9C%E6%88%90%E3%81%97%E3%81%9FSQL%E3%82%92A5M2cmd%E3%81%A7%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%8B%E3%82%89%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B/","summary":"A5M2で生成されたSQLをコマンドラインから実行する。 実行方法はコマンドラインツールのzipを解凍すると一緒に入っているa5m2cmd.j","title":"A5M2で作成したSQLをA5M2cmdでコマンドラインから実行する"},{"content":"S3のポリシー見直しをしていたところ、ALBのログがS3に出力されなくなった。 ALBのログ出力に指定するバケットのポリシーのPrincipalに自分のアカウントIDを指定していたことが原因。\n ALBからのログ出力に指定するアカウントIDは以下の通り\n   ap-northeast-1: 582318560864\n  ap-northeast-3: 383597477331\n   バケットポリシー(東京リージョン) { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;AWS\u0026#34;: \u0026#34;arn:aws:iam::582318560864:root\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;s3:PutObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::${バケット名}/prefix/AWSLogs/${アカウントID}/*\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: \u0026#34;logdelivery.elb.amazonaws.com\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetBucketAcl\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::${バケット名}\u0026#34; } ] }     参考   Application Load Balancer のアクセスログ\n     ","permalink":"https://szk302.dev/posts/AWS%E3%81%AEALB%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%83%AD%E3%82%B0%E3%81%8CS3%E3%81%AB%E5%87%BA%E5%8A%9B%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84/","summary":"S3のポリシー見直しをしていたところ、ALBのログがS3に出力されなくなった。 ALBのログ出力に指定するバケットのポリシーのPrincipa","title":"AWSのALBのアクセスログがS3に出力されない"},{"content":"メールのバウンス処理をテストする必要があったのでメモ\n AWS CLIを使用してバウンスをシミュレートするメールアドレスに対してメールを送信する\n fromMailAddress=sample@szk302.dev aws ses send-email --to bounce@simulator.amazonses.com --from ${fromMailAddress} --subject sample --text \u0026#34;sample body\u0026#34;     参考   シミュレーターを使用した Amazon SES でのテストメール送信\n  send-email\n     ","permalink":"https://szk302.dev/posts/AWSCLI%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6AmazonSES%E3%81%AE%E3%83%90%E3%82%A6%E3%83%B3%E3%82%B9%E7%94%A8%E3%82%B7%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BF%E3%83%BC%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B/","summary":"メールのバウンス処理をテストする必要があったのでメモ AWS CLIを使用してバウンスをシミュレートするメールアドレスに対してメールを送信する fromMailAddress=sample@szk302.dev aws ses","title":"AWSCLIを使用してAmazonSESのバウンス用シミュレーターを使用する"},{"content":"Java11のHeapメモリサイズを指定しようとしたらいつの間にか%で指定できるようになっていた。\n 以下のオプションが関連してくるようだが、使用するのは InitialRAMPercentage と MaxRAMPercentage MinRAMPercentageが最小割当サイズと勘違いしたが、200MB未満でしか使用されないプロパティだった。\n   InitialRAMPercentage\n  MaxRAMPercentage\n  MinRAMPercentage\n  MaxRAM\n  MaxRAMFraction\n   16GBの物理マシンで実行 C:\\Users\\szk\u0026gt;java -XX:InitialRAMPercentage=70.0 -XX:MaxRAMPercentage=70.0 -XshowSettings:vm -XX:+PrintFlagsFinal --version | grep -Ei \u0026#34;maxheapsize | maxram\u0026#34; size_t MaxHeapSize = 11920211968 {product} {ergonomic} uint64_t MaxRAM = 137438953472 {pd product} {default} uintx MaxRAMFraction = 4 {product} {default} double MaxRAMPercentage = 70.000000 {product} {command line} size_t ShenandoahSoftMaxHeapSize = 0 {manageable} {default} VM settings: Max. Heap Size (Estimated): 11.10G Using VM: OpenJDK 64-Bit Server VM   コンテナのメモリ制限にも対応しているようだ。\n C:\\Users\\szk\u0026gt;docker run -m 1GB amazoncorretto:11 java -XX:InitialRAMPercentage=70.0 -XX:MaxRAMPercentage=70.0 -XshowSettings:vm -XX:+PrintFlagsFinal --version | grep -Ei \u0026#34;maxheapsize | maxram\u0026#34; size_t MaxHeapSize = 752877568 {product} {ergonomic} uint64_t MaxRAM = 137438953472 {pd product} {default} uintx MaxRAMFraction = 4 {product} {default} double MaxRAMPercentage = 70.000000 {product} {command line} size_t ShenandoahSoftMaxHeapSize = 0 {manageable} {default} VM settings: Max. Heap Size (Estimated): 694.12M Using VM: OpenJDK 64-Bit Server VM     参考   Java Platform, Standard Editionツール・リファレンス\n  MaxHeapSize,InitialHeapSizeのデフォルト値\n  Java で -Xmx や -XX:MaxRAM オプションを指定した際の最大ヒープ・サイズを調べる\n  Dockerコンテナ内でJavaヒープサイズを設定する方法\n  JVM Parameters InitialRAMPercentage, MinRAMPercentage, and MaxRAMPercentage\n     ","permalink":"https://szk302.dev/posts/Java11%E3%81%A7Heap%E3%83%A1%E3%83%A2%E3%83%AA%E3%81%AE%E3%82%B5%E3%82%A4%E3%82%BA%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B/","summary":"Java11のHeapメモリサイズを指定しようとしたらいつの間にか%で指定できるようになっていた。 以下のオプションが関連してくるようだが、使","title":"Java11でHeapメモリのサイズを指定する"},{"content":"コンテナ内からメモリ使用率を確認したかったが必要なコマンドが存在しなかったため、インストール\n   対応 Dockerfileに以下を追記\n RUN yum install -y procps     参考   6.30. Procps-3.2.8\n  Corretto ECR インスタンスを使用する\n     ","permalink":"https://szk302.dev/posts/CorrettoECR%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%A7psvmstatfree%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B/","summary":"コンテナ内からメモリ使用率を確認したかったが必要なコマンドが存在しなかったため、インストール 対応 Dockerfileに以下を追記 RUN yum install -y procps 参","title":"CorrettoECRコンテナ内でps,vmstat,freeを実行する"},{"content":"JMeterをインストールして日本語化する\n   環境  OS  Microsoft Windows 10\n JAVA  openjdk 11.0.15 2022-04-19 LTS\n     インストール 以下のページからJMeterをダウンロード(今回はapache-jmeter-5.4.3.zip)して任意のディレクトリに解凍 * Download Apache JMeter\n binのディレクトリにsetenv.batを作成\n setenv.bat set JMETER_LANGUAGE=-Duser.language=\u0026#34;ja\u0026#34; -Duser.region=\u0026#34;JP\u0026#34;   jmeter.batを実行するとGUIが日本語で表示された。\n   参考   Download Apache JMeter\n  1.4 Running JMeter\n     ","permalink":"https://szk302.dev/posts/JMeter%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/","summary":"JMeterをインストールして日本語化する 環境 OS Microsoft Windows 10 JAVA openjdk 11.0.15 2022-04-19 LTS インストール 以下のページからJMeterをダウンロード(今回はapache-","title":"JMeterのインストール"},{"content":"PowerShellからAWS CLIを使用してタスクIDを取得し、ECSExecを使用してbashを実行する\n   前提条件   1サービス1コンテナを想定\n     方法 AWSCLIを使用してクラスター名からタスクARNを取得し、タスクARNからタスクIDを取得、コンテナ名は1タスクに複数いないのでタスクARNから引っ張る。\n $CLUSTER_NAME=\u0026#34;my-cluster\u0026#34; $SERVICE_NAME=\u0026#34;my-service\u0026#34; $json=(aws ecs list-tasks --cluster \u0026#34;${CLUSTER_NAME}\u0026#34; --service-name \u0026#34;${SERVICE_NAME}\u0026#34;) | ConvertFrom-Json $taskArn=$json.taskArns[0] $json=(aws ecs describe-tasks --cluster \u0026#34;${CLUSTER_NAME}\u0026#34; --tasks \u0026#34;${taskArn}\u0026#34;) | ConvertFrom-Json $containerName=$json.tasks[0].containers[0].name $taskId=($taskArn -split \u0026#39;/\u0026#39;)[-1] echo \u0026#34;------------------------------\u0026#34; echo \u0026#34;clusterName: ${CLUSTER_NAME}\u0026#34; echo \u0026#34;serviceName: ${SERVICE_NAME}\u0026#34; echo \u0026#34;taskArn: ${taskARN}\u0026#34; echo \u0026#34;taskId: ${taskId}\u0026#34; echo \u0026#34;containerName: ${containerName}\u0026#34; echo \u0026#34;------------------------------\u0026#34; chcp 65001 aws ecs execute-command --cluster \u0026#34;${CLUSTER_NAME}\u0026#34; --task ${taskId} --container \u0026#34;${containerName}\u0026#34; --interactive --command \u0026#34;/bin/bash\u0026#34;     ","permalink":"https://szk302.dev/posts/PowerShell%E3%81%A7Fargate%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E5%86%85%E3%81%AEbash%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B/","summary":"PowerShellからAWS CLIを使用してタスクIDを取得し、ECSExecを使用してbashを実行する 前提条件 1サービス1コンテナを想","title":"PowerShellでFargateコンテナ内のbashを実行する"},{"content":"application.propertiesに日本語文字列を定義していて、プレースホルダーで環境変数から取得するようにしたらエラーになったのでメモ\n application.propertiesはjavaのプロパティファイルであり使用できる文字コードはISO8859-1形式、そのためマルチバイト文字はUnicodeエスケープする必要がある。 一方、プレースホルダーで環境変数から値を取得する場合はプロパティファイルから取得しているわけではないので、Unicodeエスケープする必要がなかった。\n   参考   Eclipseでapplication.propertiesの値を取得すると文字化けする\n  Read application.properties using ISO 8859-1 #10565\n  クラスProperties.load(java.io.InputStream)\n     ","permalink":"https://szk302.dev/posts/SpringBoot%E3%81%AEapplication.properties%E3%81%AB%E4%BD%BF%E7%94%A8%E3%81%A7%E3%81%8D%E3%82%8B%E6%96%87%E5%AD%97%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AFISO8859-1%E5%BD%A2%E5%BC%8F/","summary":"application.propertiesに日本語文字列を定義していて、プレースホルダーで環境変数から取得するようにしたらエラーになったの","title":"SpringBootのapplication.propertiesに使用できる文字コードはISO8859-1形式"},{"content":"おすすめの書籍紹介\n   プリンシプル オブ プログラミング 3年目までに身につけたい 一生役立つ101の原理原則 ソフトウェアデザインにおける重要考え方がこの本に記述されています。 実際にはこの本だけで考え方を身につけることは難しいと思いますが、より詳しい内容の出典書籍が記載されているため目録として使えます。\n    みんなが知っておくべき運用設計のノウハウ 開発畑で運用に携わったことがなく運用を含めた設計を考えるに当たり最初に購入した書籍です。 基本的なことが網羅されていてかつ、お安いのでとりあえずポチっておくのがおすすめです。\n    JavaScriptエンジニアがTypeScriptの特徴を「超」手っ取り早く大まかに把握するための本 TypeScriptを使おうとしたときに購入した本です。 お安いのでとりあえずポチりました。\n    ","permalink":"https://szk302.dev/fixed/books/","summary":"おすすめの書籍紹介 プリンシプル オブ プログラミング 3年目までに身につけたい 一生役立つ101の原理原則 ソフトウェアデザインにおける重要考え方がこ","title":"Books"},{"content":"AmazonECSのタスク定義に指定されている環境変数をkey=value形式で出力したい\n   方法 AWS CLIとjqを使用して加工する\n cmd aws ecs describe-task-definition --task-definition タスク定義名 | jq -r \u0026#34;.taskDefinition.containerDefinitions[0].environment | map(\\\u0026#34;\\(.name)=\\(.value)\\\u0026#34;) | .[]\u0026#34;     ","permalink":"https://szk302.dev/posts/AmazonECS%E3%81%AE%E3%82%BF%E3%82%B9%E3%82%AF%E5%AE%9A%E7%BE%A9%E3%81%AB%E6%8C%87%E5%AE%9A%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%82%92keyvalue%E5%BD%A2%E5%BC%8F%E3%81%A7%E5%87%BA%E5%8A%9B%E3%81%99%E3%82%8B/","summary":"AmazonECSのタスク定義に指定されている環境変数をkey=value形式で出力したい 方法 AWS CLIとjqを使用して加工する cmd aws ecs describe-task-definition --task-definition タス","title":"AmazonECSのタスク定義に指定されている環境変数をkey=value形式で出力する"},{"content":"AmazonECSのタスク定義をコピーして別のタスク定義を作成したい。 CLIからタスク定義を取得し、別のタスク定義として保存する\n   方法 AWS CLIでタスク定義を取得し、登録できる形に変形させCLIから登録する。\n cmd aws ecs describe-task-definition --task-definition sample-task-definition | jq \u0026#39;.taskDefinition | del (.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)\u0026#39; \u0026gt; task-def.json aws ecs register-task-definition --family szk302-task-definition --cli-input-json file://task-def.json     参考   describe-task-definitionで取得したJSONはそのままではregister-task-definitionで登録できないお話\n  describe で出力した ECS タスク定義をさくっと登録可能な形に整形する\n  register-task-definition\n     ","permalink":"https://szk302.dev/posts/AmazonECS%E3%81%AE%E3%82%BF%E3%82%B9%E3%82%AF%E5%AE%9A%E7%BE%A9%E3%82%92%E3%82%B3%E3%83%94%E3%83%BC%E3%81%99%E3%82%8B/","summary":"AmazonECSのタスク定義をコピーして別のタスク定義を作成したい。 CLIからタスク定義を取得し、別のタスク定義として保存する 方法 AWS CLI","title":"AmazonECSのタスク定義をコピーする"},{"content":"方法 AWSCLIで取得してjqで取り出す\n SecretsManager(/secret/rds/app) { \u0026#34;spring.datasource.username\u0026#34;: \u0026#34;app\u0026#34;, \u0026#34;spring.datasource.password\u0026#34;: \u0026#34;P@ssw0rd!!\u0026#34; }   cmd aws secretsmanager get-secret-value --secret-id /secret/rds/app | jq -r \u0026#34;.SecretString | fromjson | .[\\\u0026#34;spring.datasource.password\\\u0026#34;]\u0026#34;   powershell aws secretsmanager get-secret-value --secret-id /secret/rds/app | jq -r \u0026#34;.SecretString | fromjson | .[\\\u0026#34;\u0026#34;spring.datasource.password\\\u0026#34;\u0026#34;]\u0026#34;     参考   チュートリアル: シークレットの作成と取得\n     ","permalink":"https://szk302.dev/posts/AWSCLI%E3%81%A7SecretsManager%E3%81%AB%E8%A8%AD%E5%AE%9A%E3%81%97%E3%81%9F%E3%82%B7%E3%83%BC%E3%82%AF%E3%83%AC%E3%83%83%E3%83%88%E5%80%A4%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/","summary":"方法 AWSCLIで取得してjqで取り出す SecretsManager(/secret/rds/app) { \u0026#34;spring.datasource.username\u0026#34;: \u0026#34;app\u0026#34;, \u0026#34;spring.datasource.password\u0026#34;: \u0026#34;P@ssw0rd!!\u0026#34; } cmd aws secretsmanager get-secret-value --secret-id /secret/rds/app | jq -r \u0026#34;.SecretString | fromjson | .[\\\u0026#34;spring.datasource.password\\\u0026#34;]\u0026#34; powershell aws secretsmanager get-secret-value --secret-id /secret/rds/app | jq -r \u0026#34;.SecretString | fromjson | .[\\\u0026#34;\u0026#34;spring.datasource.password\\\u0026#34;\u0026#34;]\u0026#34; 参考 チュートリアル: シークレッ","title":"AWSCLIでSecretsManagerに設定したシークレット値を取得する"},{"content":"curlで実行時のレスポンスHTTPステータスとBodyを取得したい\n   方法 /get_https-status_body.sh #!/bin/bash response=$(curl -w \u0026#39;\\n%{http_code}\u0026#39; -sL --url https://szk302.dev) echo \u0026#34;status: ${response: -3}\u0026#34; echo \u0026#34;body: ${response:0:-3}\u0026#34;     結果 console status: 200 body: \u0026lt;!doctype html\u0026gt;\u0026lt;html lang=ja dir=auto\u0026gt;\u0026lt;head\u0026gt;\u0026lt;meta name=generator content=\u0026#34;Hugo 0.80.0\u0026#34;\u0026gt;...省略\u0026lt;/html\u0026gt;     参考   curl / Docs / Tool / Manual\n  curlでヘッダ情報やHTTPステータスコードのみを出力する方法\n  curlのレスポンスで、status_codeとbodyのみを取得したい\n  【シェル芸人への道】Bashの変数展開と真摯に向き合う\n     ","permalink":"https://szk302.dev/posts/curl%E3%81%A7%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9%E3%81%AEHTTP%E3%82%B9%E3%83%86%E3%83%BC%E3%82%BF%E3%82%B9%E3%81%A8body%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/","summary":"curlで実行時のレスポンスHTTPステータスとBodyを取得したい 方法 /get_https-status_body.sh #!/bin/bash response=$(curl -w \u0026#39;\\n%{http_code}\u0026#39; -sL --url https://szk302.dev) echo \u0026#34;status: ${response: -3}\u0026#34; echo \u0026#34;body: ${response:0:-3}\u0026#34; 結果 console status: 200 body: \u0026lt;!doctype html\u0026gt;\u0026lt;html lang=ja dir=auto\u0026gt;\u0026lt;head\u0026gt;\u0026lt;meta name=generator content=\u0026#34;Hugo 0.80.0\u0026","title":"curlでレスポンスのHTTPステータスとbodyを取得する"},{"content":"コマンド呼び出しにかかった時間を計測したい\n ./time.sh #!/bin/bash startTime=$(date +\u0026#34;%s%3N\u0026#34;) sleep 1 response=$(curl -w \u0026#39;\\n%{http_code}\u0026#39; -sL --request GET --url https://szk302.dev) endTime=$(date +\u0026#34;%s%3N\u0026#34;) elapsedTime=$((endTime - startTime)) elapsedTimeSeconds=$(bc \u0026lt;\u0026lt;\u0026lt; \u0026#34;scale=3; $elapsedTime/1000\u0026#34;) echo \u0026#34;elapsedTime(ms):${elapsedTime}\u0026#34; echo \u0026#34;elapsedTime(s):${elapsedTimeSeconds}\u0026#34;     結果 console elapsedTime(ms):1109 elapsedTime(s):1.109     参考   21.1.1 Time conversion specifiers\n  date コマンドで日時のミリ秒単位まで表示する\n     ","permalink":"https://szk302.dev/posts/%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%A7%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%9F%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E5%AE%9F%E8%A1%8C%E6%99%82%E9%96%93%E3%82%92%E8%A8%88%E6%B8%AC%E3%81%99%E3%82%8B/","summary":"コマンド呼び出しにかかった時間を計測したい ./time.sh #!/bin/bash startTime=$(date +\u0026#34;%s%3N\u0026#34;) sleep 1 response=$(curl -w \u0026#39;\\n%{http_code}\u0026#39; -sL --request GET --url https://szk302.dev) endTime=$(date +\u0026#34;%s%3N\u0026#34;) elapsedTime=$((endTime - startTime)) elapsedTimeSeconds=$(bc \u0026lt;\u0026lt;\u0026lt; \u0026#34;scale=3; $elapsedTime/1000\u0026#34;) echo \u0026#34;elapsedTime(ms):${elapsedTime}\u0026#34; echo \u0026#34;elapsedTime(s):${elapsedTimeSeconds}\u0026#34; 結果 console elapsedTime(ms):1109 elapsedTime(s):1.109 参考 21.1.1 Time conversion specifiers date コマンドで日時のミリ","title":"シェルスクリプトで実行したコマンド実行時間(ms)を計測する"},{"content":"変数展開を使用して0埋めする\n   左 左側0埋めコード #!/bin/bash for i in {1..3}; do number=\u0026#34;000${i}\u0026#34; echo \u0026#34;${number: -3}\u0026#34; done     Note  -3の前にスペースを置く     結果 001 002 003     右 右側0埋めコード #!/bin/bash for i in {1..3}; do number=\u0026#34;${i}000\u0026#34; echo \u0026#34;${number::3}\u0026#34; done   結果 100 200 300     参考   Bashシェルスクリプトでゼロ埋め（ゼロパディング）文字列を生成する方法いろいろ\n     ","permalink":"https://szk302.dev/posts/Bash%E3%81%AE%E5%A4%89%E6%95%B0%E5%B1%95%E9%96%8B%E3%81%A70%E5%9F%8B%E3%82%81%E3%81%99%E3%82%8B/","summary":"変数展開を使用して0埋めする 左 左側0埋めコード #!/bin/bash for i in {1..3}; do number=\u0026#34;000${i}\u0026#34; echo \u0026#34;${number: -3}\u0026#34; done Note -3の前にスペースを置く 結果 001 002 003 右 右側0埋めコード #!/bin/bash for i in {1..3}; do number=\u0026#34;${i}000\u0026#34; echo \u0026#34;${number::3}\u0026#34;","title":"Bashの変数展開で0埋めする"},{"content":"PowershellでTCP接続可能になるまで待ちたい\n wait.ps1 $dstHost = \u0026#39;szk302.dev\u0026#39; $dstPort = 443 $maxRetryCount = 2 $count = 0 while (-not (Test-NetConnection -ComputerName $dstHost -Port $dstPort -InformationLevel Quiet) -and ($count -lt $maxRetryCount)) { Write-Host \u0026#34;Retry NetConnection\u0026#34; $count+=1 }     参考   loop until IP:port is responding\n     ","permalink":"https://szk302.dev/posts/Powershell%E3%81%A7TCP%E6%8E%A5%E7%B6%9A%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%BE%E3%81%A7%E5%BE%85%E3%81%A4/","summary":"PowershellでTCP接続可能になるまで待ちたい wait.ps1 $dstHost = \u0026#39;szk302.dev\u0026#39; $dstPort = 443 $maxRetryCount = 2 $count = 0 while (-not (Test-NetConnection -ComputerName $dstHost -Port $dstPort -InformationLevel Quiet) -and ($count -lt $maxRetryCount)) { Write-Host \u0026#34;Retry NetConnection\u0026#34; $count+=1 } 参考 loop until IP:port is responding","title":"PowershellでTCP接続できるまで待つ"},{"content":"Windows環境で直接開発すると文字コードの問題などがあるのでVSCodeのRemoteDevelopmentを使用して開発したい。\n   準備   VSCodeの拡張 RemoteDevelopment(ms-vscode-remote.vscode-remote-extensionpack)を入れておく\n  WSL2などでDockerが使用できる状態にしておく\n     方法  Cfテンプレート開発を行うディレクトリに .devcontainer ディレクトリを作成し、以下のファイルを作成\n  Dockerfile: 開発環境のDockerfile\n  docker-compose.yml: 開発環境を起動するためのdocker-compose\n  devcontainer.json: vscodeの設定\n     F1を押しコマンド入力で Remote-Containers: Open Workspace in Container を指定する\n     ディレクトリ構成 ディレクトリ構成 . ├── .devcontainer │ ├── Dockerfile │ ├── devcontainer.json │ └── docker-compose.yml ├── .gitignore ├── templates │ ├── Cf-base │ └── Cf-network.yml └── Cf-main.yml   Dockerfile 開発環境で使用する(開発環境そのもの)Dockerfile vscodeの拡張で使用するためcf-lintや実際にCfテンプレートを実行するためにAWSCLIをインストールしている。 また、AWSCLIで使用するクレデンシャル情報を環境変数から読み込むためdirenvをインストールする。\n Dockerfile FROM python:3.11.0a5-slim-bullseye # cfn-lintのインストール RUN pip install cfn-lint RUN apt update -y \u0026amp;\u0026amp; \\ apt install -y curl unzip # direnvのインストール RUN curl -sfL https://direnv.net/install.sh | bash RUN echo \u0026#39;eval \u0026#34;$(direnv hook bash)\u0026#34;\u0026#39; \u0026gt;\u0026gt; /root/.bashrc # aws cliのインストール RUN curl \u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34; -o \u0026#34;awscliv2.zip\u0026#34; \u0026amp;\u0026amp; \\ unzip awscliv2.zip \u0026amp;\u0026amp; \\ ./aws/install    docker-compose.yml Dockerfileで作成するコンテナイメージを起動するための設定ファイルであるdocker-compose.yml `.devcontainer.json`でこのdocker-compose.ymlを指定することでVSCodeがDockerfileをビルドして起動し実行してくれる\n docker-compose.yml version: \u0026#34;3\u0026#34; services: aws-cf-workspace: build: . tty: true stdin_open: true volumes: - type: bind source: \u0026#34;../\u0026#34; target: \u0026#34;/workspace\u0026#34;    devcontainer.json RemoteDevelopmentの設定ファイル 以下の拡張をインストールするよう指定している。また、拡張の設定も記述している\n   YAML(redhat.vscode-yaml)\n  CloudFormation Linter(kddejong.vscode-cfn-lint)\n  indent-rainbow(oderwat.indent-rainbow)\n  CloudFormation support for Visual Studio Code(aws-scripting-guy.cform)\n  Prettier - Code formatter(esbenp.prettier-vscode)\n   devcontainer.json { \u0026#34;name\u0026#34;: \u0026#34;cf-work\u0026#34;, \u0026#34;dockerComposeFile\u0026#34;: \u0026#34;./docker-compose.yml\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;aws-cf-workspace\u0026#34;, \u0026#34;workspaceFolder\u0026#34;: \u0026#34;/workspace\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;[yaml]\u0026#34;: { \u0026#34;editor.insertSpaces\u0026#34;: true, \u0026#34;editor.tabSize\u0026#34;: 2, \u0026#34;editor.quickSuggestions\u0026#34;: { \u0026#34;other\u0026#34;: true, \u0026#34;comments\u0026#34;: false, \u0026#34;strings\u0026#34;: true }, \u0026#34;editor.autoIndent\u0026#34;: \u0026#34;none\u0026#34; }, \u0026#34;editor.renderWhitespace\u0026#34;: \u0026#34;all\u0026#34;, \u0026#34;editor.tabSize\u0026#34;: 2, \u0026#34;editor.autoIndent\u0026#34;: \u0026#34;none\u0026#34;, \u0026#34;yaml.format.enable\u0026#34;: true, \u0026#34;yaml.trace.server\u0026#34;: \u0026#34;verbose\u0026#34;, \u0026#34;yaml.customTags\u0026#34;: [ \u0026#34;!And\u0026#34;, \u0026#34;!If\u0026#34;, \u0026#34;!Not\u0026#34;, \u0026#34;!Equals\u0026#34;, \u0026#34;!Or\u0026#34;, \u0026#34;!FindInMap\u0026#34;, \u0026#34;!Base64\u0026#34;, \u0026#34;!Cidr\u0026#34;, \u0026#34;!Ref\u0026#34;, \u0026#34;!Sub\u0026#34;, \u0026#34;!GetAtt\u0026#34;, \u0026#34;!GetAZs\u0026#34;, \u0026#34;!ImportValue\u0026#34;, \u0026#34;!Select\u0026#34;, \u0026#34;!Split\u0026#34;, \u0026#34;!Join\u0026#34; ], \u0026#34;json.schemas\u0026#34;: [ { \u0026#34;fileMatch\u0026#34;: [\u0026#34;Cf-*.json\u0026#34;], \u0026#34;url\u0026#34;: \u0026#34;https://s3.amazonaws.com/cfn-resource-specifications-us-east-1-prod/schemas/2.15.0/all-spec.json\u0026#34; } ], \u0026#34;yaml.schemas\u0026#34;: { \u0026#34;https://s3.amazonaws.com/cfn-resource-specifications-us-east-1-prod/schemas/2.15.0/all-spec.json\u0026#34;: \u0026#34;Cf-*.yaml\u0026#34; } }, \u0026#34;extensions\u0026#34;: [ \u0026#34;redhat.vscode-yaml\u0026#34;, \u0026#34;kddejong.vscode-cfn-lint\u0026#34;, \u0026#34;oderwat.indent-rainbow\u0026#34;, \u0026#34;aws-scripting-guy.cform\u0026#34;, \u0026#34;esbenp.prettier-vscode\u0026#34; ], \u0026#34;shutdownAction\u0026#34;: \u0026#34;stopCompose\u0026#34; }      参考   aws-cloudformation/cfn-lint\n  aws-scripting-guy/cform-VSCode\n  VS Code拡張機能を追加してCloudFormation開発環境をレベルアップする\n     ","permalink":"https://szk302.dev/posts/CloudFormation%E3%81%AE%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%92VSCode%E3%81%AERemoteDevelopment%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E5%86%85%E3%81%A7%E8%A1%8C%E3%81%86/","summary":"Windows環境で直接開発すると文字コードの問題などがあるのでVSCodeのRemoteDevelopmentを使用して開発したい。 準備 V","title":"CloudFormationのテンプレートコーディングをVSCodeのRemoteDevelopmentを利用してコンテナ内で行う"},{"content":"VSCodeをスクリプトでインストールしたいがDownloadURLがわからないため調べた\n Systemインストーラは以下のURLでダウンロードできる。VERSIONにlatestを入れると最新版を落とせる\n   https://update.code.visualstudio.com/${VERSION}/win32-x64/stable\n     v1.64.2 VERSION=1.64.1 curl -sL -O -J https://update.code.visualstudio.com/${VERSION}/win32-x64/stable     最新版 VERSION=latest curl -sL -O -J https://update.code.visualstudio.com/${VERSION}/win32-x64/stable     参考   Visual Studio Code FAQ/Previous release versions\n     ","permalink":"https://szk302.dev/posts/VSCode%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%A9%E3%81%AE%E3%83%AA%E3%83%B3%E3%82%AF/","summary":"VSCodeをスクリプトでインストールしたいがDownloadURLがわからないため調べた Systemインストーラは以下のURLでダウンロー","title":"VSCodeのインストーラのリンク"},{"content":"毎度忘れるのでメモ\n   dig dig www.google.com @1.1.1.1 を実行\n ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.16.1-Ubuntu \u0026lt;\u0026lt;\u0026gt;\u0026gt; www.google.com @1.1.1.1 ;; global options: +cmd ;; Got answer: ;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NOERROR, id: 60699 ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 1232 ;; QUESTION SECTION: ;www.google.com. IN A ;; ANSWER SECTION: www.google.com. 178 IN A 142.250.207.4 ;; Query time: 10 msec ;; SERVER: 1.1.1.1#53(1.1.1.1) ;; WHEN: Sat Feb 19 23:19:00 JST 2022 ;; MSG SIZE rcvd: 59     nslookup nslookup www.cloudflare.com 8.8.8.8 を実行\n サーバー: dns.google Address: 8.8.8.8 権限のない回答: 名前: www.cloudflare.com Addresses: 2606:4700::6810:7b60 2606:4700::6810:7c60 104.16.123.96 104.16.124.96     ","permalink":"https://szk302.dev/posts/dig%E3%82%84nslookup%E3%81%A7%E3%83%8D%E3%83%BC%E3%83%A0%E3%82%B5%E3%83%BC%E3%83%90%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%A6%E5%95%8F%E3%81%84%E5%90%88%E3%82%8F%E3%81%9B/","summary":"毎度忘れるのでメモ dig dig www.google.com @1.1.1.1 を実行 ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.16.1-Ubuntu \u0026lt;\u0026lt;\u0026gt;\u0026gt; www.google.com @1.1.1.1 ;; global options: +cmd ;; Got answer: ;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NOERROR, id: 60699 ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 1232 ;; QUESTION SECTION: ;www.google.com. IN A ;; ANSWER SECTION:","title":"digやnslookupでネームサーバを指定して問い合わせ"},{"content":"Packerのデバッグ方法を調査した\n   方法 環境変数に以下の値を設定\n   PACKER_LOG=1\n  PACKER_LOG_PATH=packer.log\n   packer build -debug 定義ファイル\n   参考   Debugging Packer Builds\n     ","permalink":"https://szk302.dev/posts/Packer%E5%AE%9F%E8%A1%8C%E6%99%82%E3%81%AE%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E6%96%B9%E6%B3%95/","summary":"Packerのデバッグ方法を調査した 方法 環境変数に以下の値を設定 PACKER_LOG=1 PACKER_LOG_PATH=packer.log packer build -debug 定義ファイル 参考 Debugging Packer Builds","title":"Packer実行時のデバッグ方法"},{"content":"意外とWindowsのEC2を使用することが多いため、簡単にAMIを作成できるようにしておきたい\n   環境   Ansible: 5.3.0\n  Packer: 1.7.10\n   今回は以下のDockerfileを使用しコンテナ内で実行した\n Dockerfile FROM alpine:3.15.0 ARG ANSIBLE_VERSION=\u0026#34;5.3.0\u0026#34; ## Install Ansible RUN apk --no-cache add python3 py3-pip openssl ca-certificates \u0026amp;\u0026amp; \\ apk --no-cache add --virtual build-dependencies \\ python3-dev libffi-dev openssl-dev build-base \u0026amp;\u0026amp; \\ pip3 install --upgrade pip cffi \u0026amp;\u0026amp; \\ pip3 install --upgrade pywinrm \u0026#34;ansible==${ANSIBLE_VERSION}\u0026#34; \u0026amp;\u0026amp; \\ apk del build-dependencies \u0026amp;\u0026amp; \\ rm -rf /var/cache/apk/* ## Install Packer ARG PACKER_VERSION=\u0026#34;1.7.10\u0026#34; ENV PACKER_ZIP_URL \u0026#34;https://releases.hashicorp.com/packer/${PACKER_VERSION}/packer_${PACKER_VERSION}_linux_amd64.zip\u0026#34; RUN apk --no-cache add --virtual install-dependencies \\ curl libarchive-tools \u0026amp;\u0026amp; \\ curl -L \u0026#34;${PACKER_ZIP_URL}\u0026#34; | bsdtar xvf - -C /usr/sbin \u0026amp;\u0026amp; \\ chmod +x /usr/sbin/packer \u0026amp;\u0026amp; \\ apk del install-dependencies \u0026amp;\u0026amp; \\ rm -rf /var/cache/apk/*     方法 以下3つのファイルを用意する\n   packer.json\n  userdata.txt\n  chrome/install.yml\n   packer.json { \u0026#34;variables\u0026#34;: { \u0026#34;PROFILE\u0026#34;: \u0026#34;default\u0026#34; }, \u0026#34;builders\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;amazon-ebs\u0026#34;, \u0026#34;profile\u0026#34;: \u0026#34;{{user `PROFILE`}}\u0026#34;, \u0026#34;region\u0026#34;: \u0026#34;ap-northeast-1\u0026#34;, \u0026#34;source_ami_filter\u0026#34;: { \u0026#34;filters\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Windows_Server-2019-Japanese-Full-Base*\u0026#34; }, \u0026#34;owners\u0026#34;: [ \u0026#34;801119661308\u0026#34; ], \u0026#34;most_recent\u0026#34;: true }, \u0026#34;instance_type\u0026#34;: \u0026#34;t3.micro\u0026#34;, \u0026#34;ami_name\u0026#34;: \u0026#34;windows-server-2019-{{isotime | clean_resource_name}}\u0026#34;, \u0026#34;user_data_file\u0026#34;: \u0026#34;{{template_dir}}/userdata.txt\u0026#34;, \u0026#34;tags\u0026#34;: { \u0026#34;Base_AMI_ID\u0026#34;: \u0026#34;{{ .SourceAMI }}\u0026#34;, \u0026#34;Base_AMI_NAME\u0026#34;: \u0026#34;{{ .SourceAMIName }}\u0026#34; }, \u0026#34;communicator\u0026#34;: \u0026#34;winrm\u0026#34;, \u0026#34;winrm_use_ssl\u0026#34;: \u0026#34;true\u0026#34;, \u0026#34;winrm_insecure\u0026#34;: \u0026#34;true\u0026#34;, \u0026#34;winrm_username\u0026#34;: \u0026#34;Administrator\u0026#34; } ], \u0026#34;provisioners\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;ansible\u0026#34;, \u0026#34;playbook_file\u0026#34;: \u0026#34;{{template_dir}}/chrome/install.yml\u0026#34;, \u0026#34;user\u0026#34;: \u0026#34;Administrator\u0026#34;, \u0026#34;use_proxy\u0026#34;: false, \u0026#34;extra_arguments\u0026#34;: [ \u0026#34;-e\u0026#34;, \u0026#34;ansible_winrm_server_cert_validation=ignore\u0026#34; ] }, { \u0026#34;type\u0026#34;: \u0026#34;powershell\u0026#34;, \u0026#34;inline\u0026#34;: [ \u0026#34;C:/ProgramData/Amazon/EC2-Windows/Launch/Scripts/InitializeInstance.ps1 -Schedule\u0026#34;, \u0026#34;C:/ProgramData/Amazon/EC2-Windows/Launch/Scripts/SysprepInstance.ps1 -NoShutdown\u0026#34; ] } ] }   userdata.txt \u0026lt;powershell\u0026gt; $url = \u0026#34;https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1\u0026#34; $file = \u0026#34;$env:temp\\ConfigureRemotingForAnsible.ps1\u0026#34; (New-Object -TypeName System.Net.WebClient).DownloadFile($url, $file) powershell.exe -ExecutionPolicy ByPass -File $file \u0026lt;/powershell\u0026gt;   chrome/install.yml --- - hosts: all tasks: - name: Install chrome win_shell: \u0026#39;$Path = $env:TEMP; $Installer = \u0026#34;chrome_installer.exe\u0026#34;; Invoke-WebRequest \u0026#34;https://dl.google.com/tag/s/appguid%3D%7B8A69D345-D564-463C-AFF1-A69D9E530F96%7D%26browser%3D0%26usagestats%3D1%26appname%3DGoogle%2520Chrome%26needsadmin%3Dprefers%26brand%3DGTPM/update2/installers/ChromeSetup.exe\u0026#34; -OutFile $Path\\$Installer; Start-Process -FilePath $Path\\$Installer -Args \u0026#34;/silent /install\u0026#34; -Verb RunAs -Wait; Remove-Item $Path\\$Installer\u0026#39;   動作 AWSの認証情報を環境変数に設定し以下のコマンドを実行する\n packer build packer.json      参考   AMI Builder (EBS backed)\n  Ansible Provisioner\n  Windows ホストのセットアップ\n  Building Windows AWS AMIs using Packer and Ansible\n  PackerでWindows Server 2019のAMIを作ってみた\n     ","permalink":"https://szk302.dev/posts/Packer%E3%81%A8Ansible%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6WindowsServer2019%E3%81%AEAMI%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E3%82%92%E8%A1%8C%E3%81%86/","summary":"意外とWindowsのEC2を使用することが多いため、簡単にAMIを作成できるようにしておきたい 環境 Ansible: 5.3.0 Packer: 1.7.10 今回は以下のDockerfile","title":"PackerとAnsibleを使用してWindowsServer2019のAMIのビルドを行う"},{"content":"curlを使用してHTTPステータスコードが200になるまで待ちたい\n   対応 以下のコードで5秒間隔でHTTPステータスが200になるまで待ち、30秒経過した場合はタイムアウトする。\n CHECK_URL=www.google.co.jp timeout 30 bash -c \u0026#34;while [[ \u0026#34;$(curl -s -o /dev/null -w \u0026#39;%{http_code}\u0026#39; ${CHECK_URL})\u0026#34; != \u0026#39;200\u0026#39; ]]; do sleep 5; done\u0026#34;     curl サーバーとの間でデータを転送するためのツール\n  -s  メッセージの非表示\n -o  出力先\n -w  フォーマットを指定して出力\n     参考 curl(1) — Linux manual page\n   ","permalink":"https://szk302.dev/posts/curl%E3%81%A7HTTP%E3%82%B9%E3%83%86%E3%83%BC%E3%82%BF%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%81%8C200%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%BE%E3%81%A7wait%E3%81%99%E3%82%8B/","summary":"curlを使用してHTTPステータスコードが200になるまで待ちたい 対応 以下のコードで5秒間隔でHTTPステータスが200になるまで待ち、3","title":"curlでHTTPステータスコードが200になるまでwaitする"},{"content":"Tomcatのログの保存期間を10日に変更したい。 昔は古いログは削除されなかったようだが、今はmaxDaysで設定できるようだ。\n 以下のログの場合、${CATALINA_HOME}/conf/logging.properties のmaxDaysを変更する。\n   catalina.yyyy-MM-dd.log\n  localhost.yyyy-MM-dd.log\n  host-manager.yyyy-MM-dd.log\n  manager.yyyy-MM-dd.log\n   localhost_access_log.yyyy-MM-dd.txt ただし、accessログは ${CATALINA_HOME}/conf/server.xml にmaxDaysを追加する。\n \u0026lt;Valve className=\u0026#34;org.apache.catalina.valves.AccessLogValve\u0026#34; maxDays=\u0026#34;10\u0026#34; directory=\u0026#34;logs\u0026#34; prefix=\u0026#34;localhost_access_log\u0026#34; suffix=\u0026#34;.txt\u0026#34; pattern=\u0026#34;%h %l %u %t \u0026amp;quot;%r\u0026amp;quot; %s %b\u0026#34; /\u0026gt;     環境   Tomcat: 9.0.58\n     参考   Logging in Tomcat\n  Apache Tomcat 9 Configuration Reference\n     ","permalink":"https://szk302.dev/posts/Tomcat%E3%81%AE%E3%83%AD%E3%82%B0%E3%81%AE%E4%BF%9D%E5%AD%98%E6%9C%9F%E9%96%93%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B/","summary":"Tomcatのログの保存期間を10日に変更したい。 昔は古いログは削除されなかったようだが、今はmaxDaysで設定できるようだ。 以下のログの","title":"Tomcatのログの保存期間を変更する"},{"content":"どれがなんのログなのかわからないため調べた。\n Tomcatはデフォルトで以下のログを出力している。\n  catalina.out    コンソール出力と同じ(標準出力/標準エラー出力)\n  設定箇所: catalina.sh\n    catalina.yyyy-MM-dd.log    Tomcatのログ\n  設定箇所: logging.properties\n    localhost_access_log.yyyy-MM-dd.txt    アクセスログ\n  設定箇所: server.xml\n    localhost.yyyy-MM-dd.log    ウェブアプリケーションのログ(ServletContext.log)\n  設定箇所: logging.properties\n    host-manager.yyyy-MM-dd.log    host-managerのログ\n  設定箇所: logging.properties\n    manager.yyyy-MM-dd.log  managerのログ\n  managerのログ\n  設定箇所: logging.properties\n        環境   Tomcat: 9.0.58\n     参考   Logging in Tomcat\n  Tomcat の初期設定まとめ\n  Luxorサーバに出力されるログ\n     ","permalink":"https://szk302.dev/posts/Tomcat%E3%81%AE%E3%83%AD%E3%82%B0%E3%81%AE%E7%A8%AE%E9%A1%9E/","summary":"どれがなんのログなのかわからないため調べた。 Tomcatはデフォルトで以下のログを出力している。 catalina.out コンソール出力と同じ(標準出力/標準エラー","title":"Tomcatのログの種類"},{"content":"Tomcatを使用する際、managerなどのデフォルトで含まれるアプリは消すため、ログ出力設定もプロパティをコメントアウトする。\n 以下のログ出力を停止する\n   manager.YYYY-MM-DD.log : managerのログ\n  host-manager.YYYY-MM-DD.log\t: host-managerのログ\n     環境   Tomcat: 9.0.58\n     方法 以下のプロパティのmanagerとhost-managerに関する行をコメントアウト\n ${CATALINA_HOME}/conf/logging.properties 3manager.org.apache.juli.AsyncFileHandler.level = FINE 3manager.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs 3manager.org.apache.juli.AsyncFileHandler.prefix = manager. 3manager.org.apache.juli.AsyncFileHandler.maxDays = 90 3manager.org.apache.juli.AsyncFileHandler.encoding = UTF-8 4host-manager.org.apache.juli.AsyncFileHandler.level = FINE 4host-manager.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs 4host-manager.org.apache.juli.AsyncFileHandler.prefix = host-manager. 4host-manager.org.apache.juli.AsyncFileHandler.maxDays = 90 4host-manager.org.apache.juli.AsyncFileHandler.encoding = UTF-8 省略 org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/manager].level = INFO org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/manager].handlers = 3manager.org.apache.juli.AsyncFileHandler org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/host-manager].level = INFO org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/host-manager].handlers = 4host-manager.org.apache.juli.AsyncFileHandler     参考   Logging in Tomcat\n  Tomcat の初期設定まとめ\n     ","permalink":"https://szk302.dev/posts/Tomcat%E3%81%A7%E4%B8%8D%E8%A6%81%E3%81%AA%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E3%82%92%E5%81%9C%E6%AD%A2%E3%81%99%E3%82%8B/","summary":"Tomcatを使用する際、managerなどのデフォルトで含まれるアプリは消すため、ログ出力設定もプロパティをコメントアウトする。 以下のログ","title":"Tomcatで不要なログ出力を停止する"},{"content":"サーバのストレージ容量が圧迫されいることがわかったが、どのディレクトリが圧迫しているかわからない。\n   対応 以下のコマンドを実行し、ディレクトリの容量順にTop10件を表示させる\n du -h -d 1 | sort -rh | head -n 10   du 使用量の表示\n  -h  サイズに応じて読みやすい単位で表示\n -d  集計するディレクトリの深さを指定\n    sort ソート\n  -h  人が読むことのできる形式の数値で並べ替える（例：2K、1Gなど）\n -r  逆順で並べ替える\n    head 先頭を表示\n  -n  先頭から指定した行数のみ表示\n      参考   【 du 】コマンド――ディスクの使用量を表示する\n  【 sort 】コマンド――テキストファイルを行単位で並べ替える\n  du -h -d 1 | sort -h が優勝\n  【 head 】コマンド／【 tail 】コマンド――長いメッセージやテキストファイルの先頭だけ／末尾だけを表示する\n     ","permalink":"https://szk302.dev/posts/%E3%82%B9%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B8%E5%AE%B9%E9%87%8F%E3%82%92%E5%9C%A7%E8%BF%AB%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%82%92%E6%8E%A2%E3%81%99/","summary":"サーバのストレージ容量が圧迫されいることがわかったが、どのディレクトリが圧迫しているかわからない。 対応 以下のコマンドを実行し、ディレクトリの","title":"ストレージ容量を圧迫しているディレクトリを探す"},{"content":"行番号指定でコメントアウトを行うのではなく、文字列を指定してコメントアウトする\n   方法 後方参照?(マッチ後変数)を使用して行う\n 更新割当演算子(|=)を使用する\n コメントアウト コメントアウト対象のファイル\n logging.properties 1catalina.org.apache.juli.AsyncFileHandler.level = FINE 1catalina.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs 1catalina.org.apache.juli.AsyncFileHandler.prefix = catalina. 1catalina.org.apache.juli.AsyncFileHandler.maxDays = 90 1catalina.org.apache.juli.AsyncFileHandler.encoding = UTF-8 2localhost.org.apache.juli.AsyncFileHandler.level = FINE 2localhost.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs 2localhost.org.apache.juli.AsyncFileHandler.prefix = localhost. 2localhost.org.apache.juli.AsyncFileHandler.maxDays = 90 2localhost.org.apache.juli.AsyncFileHandler.encoding = UTF-8   コマンド\n console TARGET=1catalina sed -e \u0026#34;s/^\\(${TARGET}.*\\)/#\\1/g\u0026#34; logging.properties   結果\n console #1catalina.org.apache.juli.AsyncFileHandler.level = FINE #1catalina.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs #1catalina.org.apache.juli.AsyncFileHandler.prefix = catalina. #1catalina.org.apache.juli.AsyncFileHandler.maxDays = 90 #1catalina.org.apache.juli.AsyncFileHandler.encoding = UTF-8 2localhost.org.apache.juli.AsyncFileHandler.level = FINE 2localhost.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs 2localhost.org.apache.juli.AsyncFileHandler.prefix = localhost. 2localhost.org.apache.juli.AsyncFileHandler.maxDays = 90 2localhost.org.apache.juli.AsyncFileHandler.encoding = UTF-8    アンコメント アンコメント対象のファイル\n logging.properties #1catalina.org.apache.juli.AsyncFileHandler.level = FINE #1catalina.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs #1catalina.org.apache.juli.AsyncFileHandler.prefix = catalina. #1catalina.org.apache.juli.AsyncFileHandler.maxDays = 90 #1catalina.org.apache.juli.AsyncFileHandler.encoding = UTF-8 2localhost.org.apache.juli.AsyncFileHandler.level = FINE 2localhost.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs 2localhost.org.apache.juli.AsyncFileHandler.prefix = localhost. 2localhost.org.apache.juli.AsyncFileHandler.maxDays = 90 2localhost.org.apache.juli.AsyncFileHandler.encoding = UTF-8   コマンド\n console TARGET=1catalina sed -e \u0026#34;s/^#\\(${TARGET}.*\\)/\\1/g\u0026#34; logging.properties   結果\n console 1catalina.org.apache.juli.AsyncFileHandler.level = FINE 1catalina.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs 1catalina.org.apache.juli.AsyncFileHandler.prefix = catalina. 1catalina.org.apache.juli.AsyncFileHandler.maxDays = 90 1catalina.org.apache.juli.AsyncFileHandler.encoding = UTF-8 2localhost.org.apache.juli.AsyncFileHandler.level = FINE 2localhost.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs 2localhost.org.apache.juli.AsyncFileHandler.prefix = localhost. 2localhost.org.apache.juli.AsyncFileHandler.maxDays = 90 2localhost.org.apache.juli.AsyncFileHandler.encoding = UTF-8      参考   5.7 Back-references and Subexpressions\n  それは後方参照じゃない\n     ","permalink":"https://szk302.dev/posts/sed%E3%81%A7%E5%BE%8C%E6%96%B9%E5%8F%82%E7%85%A7%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E3%82%A4%E3%83%B3%E3%82%A2%E3%83%B3%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%E8%A1%8C%E3%81%86/","summary":"行番号指定でコメントアウトを行うのではなく、文字列を指定してコメントアウトする 方法 後方参照?(マッチ後変数)を使用して行う 更新割当演算子(|","title":"sedで後方参照を使用してコメントイン、アンコメントを行う"},{"content":"毎度忘れるのでメモ\n   方法 一時的なTokenの取得(duration-secondsのデフォルトは12時間) aws sts get-session-token --duration-seconds 3600   表示 { \u0026#34;Credentials\u0026#34;: { \u0026#34;AccessKeyId\u0026#34;: \u0026#34;アクセスキー\u0026#34;, \u0026#34;SecretAccessKey\u0026#34;: \u0026#34;シークレットキー\u0026#34;, \u0026#34;SessionToken\u0026#34;: \u0026#34;セッショントークン\u0026#34;, \u0026#34;Expiration\u0026#34;: \u0026#34;2022-02-15T23:49:21+00:00\u0026#34; } }     参考   AWS CLI Command Reference/get-session-token\n     ","permalink":"https://szk302.dev/posts/AWSCLI%E3%81%A7%E4%B8%80%E6%99%82%E7%9A%84%E3%81%AA%E8%AA%8D%E8%A8%BC%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/","summary":"毎度忘れるのでメモ 方法 一時的なTokenの取得(duration-secondsのデフォルトは12時間) aws sts get-session-token --duration-seconds 3600 表示 { \u0026#34;Credentials\u0026#34;: { \u0026#34;AccessKeyId\u0026#34;: \u0026#34;アク","title":"AWSCLIで一時的な認証を取得する"},{"content":"WindowsのEC2へSSMのポートフォワーディングを利用してRDP接続するユーザを作成したい。\n   設定 以下のポリシーをもつIAMユーザを作成する。\n SSM Session開始/停止ポリシー { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ssm:StartSession\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:ssm:ap-northeast-1::document/AWS-StartPortForwardingSession\u0026#34;, \u0026#34;arn:aws:ec2:ap-northeast-1:アカウントID:instance/*\u0026#34; ] }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ssm:TerminateSession\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:ssm:*:*:session/${aws:username}-*\u0026#34; ] } ] }     確認 今回はPowershellから確認した\n 環境 接続元(ローカル)   AWSCLI:2.4.18\n  SessionManagerPlugin:1.2.295.0\n    接続先 セッションマネージャのステータスがオンラインになっていること\n   ami: amazon/Windows_Server-2019-English-Full-Base-2022.02.10\n     手順 SSM Sessionによるポートフォワーディング $Env:AWS_ACCESS_KEY_ID=\u0026#34;アクセスキー\u0026#34; $Env:AWS_SECRET_ACCESS_KEY=\u0026#34;シークレットキー\u0026#34; $Env:AWS_DEFAULT_REGION=\u0026#34;ap-northeast-1\u0026#34; aws ssm start-session --target インスタンスID --document-name AWS-StartPortForwardingSession --parameters portNumber=3389,localPortNumber=3389      参考   Session Manager の追加サンプル IAM ポリシー\n  (オプション) AWS CLI 用の Session Manager プラグインをインストールする\n  Private SubnetのEC2にSSM Port ForwardingでRDPアクセスするための通信要件\n     ","permalink":"https://szk302.dev/posts/Windows%E3%81%AEEC2%E3%81%AB%E6%8E%A5%E7%B6%9A%E3%81%99%E3%82%8B%E3%81%A0%E3%81%91%E3%81%AEIAM%E3%83%A6%E3%83%BC%E3%82%B6%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/","summary":"WindowsのEC2へSSMのポートフォワーディングを利用してRDP接続するユーザを作成したい。 設定 以下のポリシーをもつIAMユーザを作成","title":"WindowsのEC2に接続するだけのIAMユーザを作成する"},{"content":"毎度忘れるのでメモ\n   環境変数への設定 Shell export AWS_ACCESS_KEY_ID=AKIXXXXXXXXXXXXXXXXX export AWS_SECRET_ACCESS_KEY=wJaXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX export AWS_SESSION_TOKEN=AQoXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX export AWS_DEFAULT_REGION=ap-northeast-1   Powershell $Env:AWS_ACCESS_KEY_ID=\u0026#34;AKIXXXXXXXXXXXXXXXXX\u0026#34; $Env:AWS_SECRET_ACCESS_KEY=\u0026#34;wJaXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\u0026#34; $Env:AWS_SESSION_TOKEN=\u0026#34;AQoXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\u0026#34; $Env:AWS_DEFAULT_REGION=\u0026#34;ap-northeast-1\u0026#34;   Bat set AWS_ACCESS_KEY_ID=AKIXXXXXXXXXXXXXXXXX set AWS_SECRET_ACCESS_KEY=wJaXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX set AWS_SESSION_TOKEN=AQoXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX set AWS_DEFAULT_REGION=ap-northeast-1     参考   Using Credentials from Environment Variables\n     ","permalink":"https://szk302.dev/posts/AWSCLI%E3%81%AE%E8%AA%8D%E8%A8%BC%E6%83%85%E5%A0%B1%E3%82%92%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%81%8B%E3%82%89%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B/","summary":"毎度忘れるのでメモ 環境変数への設定 Shell export AWS_ACCESS_KEY_ID=AKIXXXXXXXXXXXXXXXXX export AWS_SECRET_ACCESS_KEY=wJaXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX export AWS_SESSION_TOKEN=AQoXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX export AWS_DEFAULT_REGION=ap-northeast-1 Powershell $Env:AWS_ACCESS_KEY_ID=\u0026#34;AKIXXXXXXXXXXXXXXXXX\u0026#34; $Env:AWS_SECRET_ACCESS_KEY=\u0026#34;wJaXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\u0026#34; $Env:AWS_SESSION_TOKEN=\u0026#34;AQoXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\u0026#34; $Env:AWS_DEFAULT_REGION=\u0026#34;ap-northeast-1\u0026#34; Bat set AWS_ACCESS_KEY_ID=AKIXXXXXXXXXXXXXXXXX set AWS_SECRET_ACCESS_KEY=wJaXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX set AWS_SESSION_TOKEN=AQoXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX set AWS_DEFAULT_REGION=ap-northeast-1 参考 Using Credentials from Environment Variables","title":"AWSCLIの認証情報を環境変数から設定する"},{"content":"ブロードキャストとマルチキャストの違いを忘れたのでメモ\n  ユニキャスト  一対一\n ブロードキャスト  データリンク内のすべて\n マルチキャスト  特定のグループ内\n エニーキャスト  特定のグループ内の1つ\n   ","permalink":"https://szk302.dev/posts/Network/%E3%83%96%E3%83%AD%E3%83%BC%E3%83%89%E3%82%AD%E3%83%A3%E3%82%B9%E3%83%88%E3%81%A8%E3%83%9E%E3%83%AB%E3%83%81%E3%82%AD%E3%83%A3%E3%82%B9%E3%83%88%E3%81%AE%E9%81%95%E3%81%84/","summary":"ブロードキャストとマルチキャストの違いを忘れたのでメモ ユニキャスト 一対一 ブロードキャスト データリンク内のすべて マルチキャスト 特定のグループ内","title":"ブロードキャストとマルチキャストの違い"},{"content":"AWSDirectConnectを使用してS3やAPIGateway(Public)に接続したいという要件が出たため調査\n 専用接続、ホスト接続型、ホストVIF、占有VIFなど似たような用語が複数あり混乱した。\n   AWS Direct Connectとは 専用線の片端とAWS CloudをDirect Connectロケーションで接続するサービス\n   接続方法 DirectConnectを使用するには以下の3つの接続パターンがある(ConnectionとVIFの組み合わせ)\n  標準 VIF  親 Direct Connect 接続が存在する AWS アカウントで接続\n ホストVIF  同じ親 Direct Connect 接続を使用している別の AWS アカウント or Amazon パートナーネットワーク (APN) のパートナーから購入した VIF\n ホスト型接続  プロビジョニングする APN パートナーから購入した sub-1G 接続\n     Connection Connectionは以下の２つ\n   専用接続(標準VIF(占有型)とホストVIF(共有型))\n  ホスト接続(Sub-1G)\n     標準VIF(占有型)とホストVIF(共有型)   標準VIF(占有型)\n  Connection自体提供される\n  VIFを自由に設定可能\n     ホストVIF(共有型)\n  Connectionは別アカウント\n  VIFが払い出される\n  1Connectionを複数アカウントで共有\n        VIFの種類 Connectionを通してAWSリソースにアクセスするための論理インターフェイス\n  パブリックVIF  AWSパブリックサービスへの接続時に利用\n プライベートVIF  AWSのVPC接続時に利用\n トランジットVIF  Transit Gateway(TGW)接続時に利用\n     参考   AWS Black Belt Online Seminar/AWS Direct Connect\n  AWS Direct Connectユーザーガイド\n  Direct Connectを利用して専用線経由でS3やDyamoDBへアクセスする (AWS Direct Connect のパブリック接続)\n  ホスト型仮想インターフェイス (VIF) とホスト型接続の違いは何ですか?\n  Become an AWS VPN andAWS Direct Connect expert\n  Direct Connect接続タイプとVIF作成パターンをまとめてみた\n  AWS再入門ブログリレー AWS Direct Connect 編\n     ","permalink":"https://szk302.dev/posts/AWSDirectConnect%E3%81%AE%E6%8E%A5%E7%B6%9A%E6%96%B9%E6%B3%95/","summary":"AWSDirectConnectを使用してS3やAPIGateway(Public)に接続したいという要件が出たため調査 専用接続、ホスト接続","title":"AWSDirectConnectの接続方法"},{"content":"日付を含むファイル名を生成したい\n FILE_PATH=sample.adoc FILE_NAME=\u0026#34;${FILE_PATH##*/}\u0026#34; POST_DATA_TITLE=\u0026#34;${FILE_NAME%%.adoc}_`TZ=Asia/Tokyo date +%Y%m%d_%H-%M-%S`.adoc\u0026#34; echo ${POST_DATA_TITLE}   sample_20220119_23-37-31.adoc   ","permalink":"https://szk302.dev/posts/date%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7%E6%97%A5%E4%BB%98%E3%82%92%E5%90%AB%E3%82%80%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%90%8D%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/","summary":"日付を含むファイル名を生成したい FILE_PATH=sample.adoc FILE_NAME=\u0026#34;${FILE_PATH##*/}\u0026#34; POST_DATA_TITLE=\u0026#34;${FILE_NAME%%.adoc}_`TZ=Asia/Tokyo date +%Y%m%d_%H-%M-%S`.adoc\u0026#34; echo ${POST_DATA_TITLE} sample_20220119_23-37-31.adoc","title":"dateコマンドで日付を含むファイル名を作成する"},{"content":"SpringBootを使用して作成したWebアプリケーションをWarにするときに、依存ライブラリを別にしたい\n   方法  dependenciesの書き方をimplementationからprovidedCompileに変える\n  build.gradleに以下の設定を追加\nbootWar { providedClasspath=[] }        参考   クラス BootWar\n     ","permalink":"https://szk302.dev/posts/Gradle%E3%81%A7SpringBoot%E4%BD%BF%E7%94%A8%E6%99%82%E3%81%AEWar%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E7%94%9F%E6%88%90%E3%81%AB%E4%BE%9D%E5%AD%98jar%E3%82%92%E5%90%AB%E3%82%81%E3%81%AA%E3%81%84/","summary":"SpringBootを使用して作成したWebアプリケーションをWarにするときに、依存ライブラリを別にしたい 方法 dependenciesの書","title":"GradleでSpringBoot使用時のWarファイル生成に依存jarを含めない"},{"content":"WindowsPCを使用したネットワーク疎通確認用にPowershellで簡易HTTPサーバを作成した。\n http-server.ps1 $html = @\u0026#34; \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;ja\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;TestPage\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;Test page\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Test\u0026lt;/h1\u0026gt; \u0026lt;div\u0026gt;Sample\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026#34;@ $port = 80 Write-Host \u0026#34;Start http server\u0026#34; Write-Host \u0026#34;Press ESC to stop the http server ...\u0026#34; -fore yellow Write-Host \u0026#34;\u0026#34; $listener = New-Object system.net.HttpListener $listener.Prefixes.Add(\u0026#39;http://127.0.0.1:\u0026#39; + $port + \u0026#39;/\u0026#39;) try { $listener.Start() while ($true) { if ( $host.ui.RawUi.KeyAvailable ) { $key = $host.ui.RawUI.ReadKey( \u0026#34;NoEcho,IncludeKeyUp,IncludeKeyDown\u0026#34; ) if ( $key.VirtualKeyCode -eq 27 ) { break } } $context = $listener.GetContext() $response = $context.Response $bytes = [System.Text.Encoding]::UTF8.GetBytes($html) $response.ContentLength64 = $bytes.Length $output = $response.OutputStream $output.Write($bytes, 0, $bytes.Length) $output.Close() } } finally { $listener.Stop() }     実行方法 管理者権限で http-server.ps1 を実行する\n   参考   PowerShellで簡易HTTPサーバーを作ってみる\n     ","permalink":"https://szk302.dev/posts/Powershell%E3%81%A7HTTP%E3%82%B5%E3%83%BC%E3%83%90%E3%82%92%E5%BB%BA%E3%81%A6%E3%82%8B/","summary":"WindowsPCを使用したネットワーク疎通確認用にPowershellで簡易HTTPサーバを作成した。 http-server.ps1 $html = @\u0026#34; \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;ja\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;TestPage\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;Test page\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt;","title":"PowershellでHTTPサーバを建てる"},{"content":"環境変数からユーザ名とメールアドレスを指定していたが、WSLやコンテナ内からのコミットで切り替わり、誤コミット連発したのでローカル設定として設定したい。\n   方法   --localを使用する   Note  デフォルト動作らしいのでなくてもいいらしい     git config --local user.name \u0026#34;名前\u0026#34; git config --local user.email \u0026#34;メールアドレス\u0026#34;     参考   --local\n     ","permalink":"https://szk302.dev/posts/Git%E3%81%AE%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%A8%E3%81%97%E3%81%A6%E3%83%A6%E3%83%BC%E3%82%B6%E5%90%8D%E3%81%A8%E3%83%A1%E3%83%BC%E3%83%AB%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B/","summary":"環境変数からユーザ名とメールアドレスを指定していたが、WSLやコンテナ内からのコミットで切り替わり、誤コミット連発したのでローカル設定として","title":"Gitのリポジトリの設定としてユーザ名とメールアドレスを設定する"},{"content":"jqでjsonの一部の値だけ書き換えたい\n   方法 更新割当演算子(|=)を使用する\n Ex base.json { \u0026#34;title\u0026#34;: \u0026#34;Sample json\u0026#34;, \u0026#34;body\u0026#34;: { \u0026#34;storage\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;\u0026#34; } } }   jq \u0026#39;.body.storage.value |=\u0026#34;xyz\u0026#34;\u0026#39; base.json\n { \u0026#34;title\u0026#34;: \u0026#34;Sample json\u0026#34;, \u0026#34;body\u0026#34;: { \u0026#34;storage\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;xyz\u0026#34; } } }      参考   jq Manual (development version)/Update-assignment: |=\n     ","permalink":"https://szk302.dev/posts/jq%E3%81%A7json%E3%81%AE%E5%80%A4%E3%82%92%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88%E3%82%8B/","summary":"jqでjsonの一部の値だけ書き換えたい 方法 更新割当演算子(|=)を使用する Ex base.json { \u0026#34;title\u0026#34;: \u0026#34;Sample json\u0026#34;, \u0026#34;body\u0026#34;: { \u0026#34;storage\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;\u0026#34; } } } jq \u0026#39;.body.storage.value |=\u0026#34;xyz\u0026#34;\u0026#39; base.json { \u0026#34;title\u0026#34;: \u0026#34;Sample json\u0026#34;, \u0026#34;body\u0026#34;: { \u0026#34;storage\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;xyz\u0026#34; } } }","title":"jqでjsonの値を書き換える"},{"content":"ブログの記事中で記述できるドメインの example.com のような特別なIPを調査\n   TEST-NET-2: 203.0.113.0/24\n     参考   rfc6890\n  RFC 6890 - Special-Purpose IP Address Registries 日本語訳\n     ","permalink":"https://szk302.dev/posts/%E3%83%86%E3%82%B9%E3%83%88%E3%81%AB%E4%BD%BF%E7%94%A8%E3%81%A7%E3%81%8D%E3%82%8B%E7%89%B9%E5%88%A5%E3%81%AAIP/","summary":"ブログの記事中で記述できるドメインの example.com のような特別なIPを調査 TEST-NET-2: 203.0.113.0/24 参考 rfc6890 RFC 6890 - Special-Purpose IP Address Registries 日本語訳","title":"テストに使用できる特別なIP"},{"content":"AlpineLinuxでcsplitを使用したい\n   インストール apk add coreutils   csplit --version csplit (GNU coreutils) 8.32 Copyright (C) 2020 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;https://gnu.org/licenses/gpl.html\u0026gt;. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Written by Stuart Kemp and David MacKenzie.     参考   csplit\n     ","permalink":"https://szk302.dev/posts/AlpineLinux%E3%81%ABcsplit%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B/","summary":"AlpineLinuxでcsplitを使用したい インストール apk add coreutils csplit --version csplit (GNU coreutils) 8.32 Copyright (C) 2020 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;https://gnu.org/licenses/gpl.html\u0026gt;. This is free software: you are free to change and redistribute it. There is NO","title":"AlpineLinuxにcsplitをインストールする"},{"content":"yamlからjsonに変換する必要があったため調査\n   環境   yq: version 4.16.1\n     方法 ファイルから xx00(ymlファイル) title: PlantUMLでオブジェクトの並びを試してみる date: 2021-11-25T08:20:00+09:00 draft: false categories: - OSS tags: - PlantUML    実行 yq e xx00 -o json\n   コンソール { \u0026#34;title\u0026#34;: \u0026#34;PlantUMLでオブジェクトの並びを試してみる\u0026#34;, \u0026#34;date\u0026#34;: \u0026#34;2021-11-25T08:20:00+09:00\u0026#34;, \u0026#34;draft\u0026#34;: false, \u0026#34;categories\u0026#34;: [ \u0026#34;OSS\u0026#34; ], \u0026#34;tags\u0026#34;: [ \u0026#34;PlantUML\u0026#34; ] }      標準入力から cat xx00 | yq e - -o json\n コンソール { \u0026#34;title\u0026#34;: \u0026#34;PlantUMLでオブジェクトの並びを試してみる\u0026#34;, \u0026#34;date\u0026#34;: \u0026#34;2021-11-25T08:20:00+09:00\u0026#34;, \u0026#34;draft\u0026#34;: false, \u0026#34;categories\u0026#34;: [ \u0026#34;OSS\u0026#34; ], \u0026#34;tags\u0026#34;: [ \u0026#34;PlantUML\u0026#34; ] }     参考   mikefarah/yq\n     ","permalink":"https://szk302.dev/posts/yq%E3%81%A7yaml%E3%81%8B%E3%82%89json%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B/","summary":"yamlからjsonに変換する必要があったため調査 環境 yq: version 4.16.1 方法 ファイルから xx00(ymlファイル) title: PlantUMLでオブジェクトの並び","title":"yqでyamlからjsonに変換する"},{"content":"Entrypoint指定済みのDockerイメージに対して docker run -it ${IMAGE_NAME} /bin/bash したい。\n Entrypointが指定されている場合のコマンド指定はEntrypointの引数として実行されるため、bashが実行できなかった。\n   対応 Entrypointを上書きして実行する\n docker run -it --entrypoint=\u0026#39;/bin/bash\u0026#39; ${IMAGE_NAME}     参考   Docker run リファレンス\n     ","permalink":"https://szk302.dev/posts/Entrypoint%E6%8C%87%E5%AE%9A%E6%B8%88%E3%81%BF%E3%81%AEDocker%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%81%A7bash%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%9F%E3%81%84/","summary":"Entrypoint指定済みのDockerイメージに対して docker run -it ${IMAGE_NAME} /bin/bash したい。 Entrypointが指定されている場合のコマンド指定はEntr","title":"Entrypoint指定済みのDockerイメージでbashを実行したい"},{"content":"対応 git config --global core.quotepath false     オプション  core.quotepath  Cのエスケープ方法と同じようにマルチバイト文字をエスケープする(default:true)\n     参考   core.quotepath\n  kkato233/git日本語設定.md\n     ","permalink":"https://szk302.dev/posts/Git%E3%81%A7%E3%83%9E%E3%83%AB%E3%83%81%E3%83%90%E3%82%A4%E3%83%88%E6%96%87%E5%AD%97%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88%E3%82%A8%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%97%E3%81%95%E3%82%8C%E3%82%8B/","summary":"対応 git config --global core.quotepath false オプション core.quotepath Cのエスケープ方法と同じようにマルチバイト文字をエスケープする(default:true) 参考 core.quotepath kkato233/","title":"Gitでマルチバイトの文字を表示した場合エスケープされる"},{"content":"以下の攻撃に対するフィルタを設定する\n  IPスプーフィング  送信元のIPアドレスを偽装し、通信を行う攻撃手法\n Land攻撃  送信元IPアドレスと送信先IPアドレスが同一のパケットを攻撃対象コンピュータに送るDoS攻撃の一種\n Smurf攻撃  標的となるコンピュータのIPアドレスを送信元アドレスとしてなりすまし、標的に向けて大量のパケットを送りつけるDoS攻撃の一種\n     Note  今回はppではなくlan2に設定       設定 ip filter 60 reject 203.0.113.0/24 * * * * ip filter 61 reject 10.0.0.0/8 * * * * ip filter 62 reject 172.16.0.0/12 * * * * ip filter 63 reject 192.168.0.0/16 * * * * ip filter 100 pass * 203.0.113.0/24 * * * ip lan2 secure filter in 60 61 62 63 100   フィルタ箇所 以下フィルタ箇所は IPパケット・フィルタリング機能がどこで働くかわからない。 から\n  : [LAN2] : : +-----------------+-------------------+ | | | | +-----------------------------+ | | | Ethernet processing | | | +-----------------------------+ | | | | | +-----------------------------+ | | | IP filter | | | | +----(↓)----+----(↑)------+ | | ip filter ... | | | in | out | | | ip lan2 secure filter in/out .... | | +----(↓)----+----(↑)------+ | | | +-----------------------------+ | | | | | (LAN) | ip lan2 address | | | | +-----------------------------+ | | | IPルーティング | | | +-----------------------------+ | | | | | (LAN) | ip lan1 address | | | | +-----------------------------+ | | | IP filter | | | | +----(↑)----+----(↓)------+ | | ip filter ... | | | in | out | | | ip lan1 secure filter in/out .... | | +----(↑)----+----(↓)------+ | | | +-----------------------------+ | | | | | | \u0026lt; in \u0026gt; | | +-----------------------------+ | | | NAT descriptor | | nat descriptor ... | | +-(1)-+-(2)-+-(3)-+-(4)-+ | | ip lan1 nat descriptor ... | | | ▼ | ▼ | ▼ | ▼ | | | | | | +-----+-----+-----+-----+ | | | +-----------------------------+ | | | \u0026lt; out \u0026gt; | | | | | +-----------------------------+ | | | Ethernet processing | | | +-----------------------------+ | | | | +-----------------+-------------------+ | [LAN1] | | ------------------+--------------------      参考   IPアドレス・スプーフィング攻撃(ip spoofing)に対処するフィルタを教えて下さい。\n  IPパケット・フィルタリング機能がどこで働くかわからない。\n  LAND攻撃 【Local Area Network Denial attack】 LAND attack / ランド攻撃\n  Smurf攻撃 【Smurf attack】 スマーフアタック\n  IPスプーフィング\n     ","permalink":"https://szk302.dev/posts/RTX830%E3%81%ABIP%E3%82%B9%E3%83%97%E3%83%BC%E3%83%95%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%AESecure%E3%83%95%E3%82%A3%E3%83%AB%E3%82%BF%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B/","summary":"以下の攻撃に対するフィルタを設定する IPスプーフィング 送信元のIPアドレスを偽装し、通信を行う攻撃手法 Land攻撃 送信元IPアドレスと送信先","title":"RTX830にIPスプーフィングのSecureフィルタを設定する"},{"content":"pipで git-filter-repo をインストールしたが、 git: \u0026#39;filter-repo\u0026#39; is not a git command というエラーが発生 原因はgit-filter-repoのパスが通っていないせいだった。 git-filter-repoのパスを調査\n   方法 pip show -f モジュール名 を実行する\n  pip show -f git-filter-repo を実行\n  表示\n   Name: git-filter-repo Version: 2.34.0 Summary: Quickly rewrite git repository history Home-page: https://github.com/newren/git-filter-repo Author: None Author-email: None License: MIT Location: /home/szk/.local/lib/python3.8/site-packages Requires: Required-by: Files: ../../../bin/git-filter-repo __pycache__/git_filter_repo.cpython-38.pyc git_filter_repo-2.34.0.data/scripts/git-filter-repo git_filter_repo-2.34.0.dist-info/INSTALLER git_filter_repo-2.34.0.dist-info/METADATA git_filter_repo-2.34.0.dist-info/RECORD git_filter_repo-2.34.0.dist-info/WHEEL git_filter_repo-2.34.0.dist-info/entry_points.txt git_filter_repo-2.34.0.dist-info/top_level.txt git_filter_repo.py   Filesの1行目がbinのパス。Locationからの相対パスになっているようだった。\n   参考   pip installで導入したパッケージのバイナリファイルのパスを知る方法\n     ","permalink":"https://szk302.dev/posts/pip%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%81%9F%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AEbin%E3%81%AE%E3%83%91%E3%82%B9%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B/","summary":"pipで git-filter-repo をインストールしたが、 git: \u0026#39;filter-repo\u0026#39; is not a git command というエラーが発生 原因はgit-filter-repoのパスが通っていないせいだった。 git-","title":"pipインストールしたモジュールのbinのパスを調べる"},{"content":"WindowsやWSLなど複数の場所でコミットしていたので、GitのログのCommiterやAuthorがバラバラになってしまった。 過去のログのCommiterやAuthorをまとめて書き換えたい\n   方法 filter-repo を使用する ぐぐると filter-branch が出てくるが、2021/12/19時点では filter-repo を推奨している\n filter-repoはpythonのライブラリであるため、pipでインストール可能\n インストール   pip install git-filter-repo\n    手順  置換後の名前とメール,置換対象のメールアドレスを定義したファイルを作成する ※以下.mailmapファイルとして作成した場合\n.mailmap s \u0026lt;69619077+szk302@users.noreply.github.com\u0026gt; \u0026lt;置換対象のメールアドレス\u0026gt;     git filter-repo -f --mailmap .mailmap を実行\n     Note  git: \u0026#39;filter-repo\u0026#39; is not a git command というエラーが表示された場合、filter-repoへのパスが通っていません.        参考   newren/git-filter-repo\n  Gitの履歴から名前とメールアドレスを一括変更 (git-filter-repo)\n  コミットログ（コミッター、コミッターのメールアドレス）を書き換える方法【改】\n  git-filter-branch - Rewrite branches\n  Git の Commit Author と Commiter を変更する\n     ","permalink":"https://szk302.dev/posts/Git%E3%81%AE%E3%83%AD%E3%82%B0%E3%81%AECommiter%E3%81%A8Author%E3%82%92%E3%81%BE%E3%81%A8%E3%82%81%E3%81%A6%E6%94%B9%E7%B7%A8%E3%81%99%E3%82%8B/","summary":"WindowsやWSLなど複数の場所でコミットしていたので、GitのログのCommiterやAuthorがバラバラになってしまった。 過去のロ","title":"GitのログのCommiterとAuthorをまとめて改編する"},{"content":"Gitで直近にコミットされたファイルのパスを取得した。\n git log --pretty=\u0026#34;\u0026#34; -1 --name-only -- *.adoc   表示結果 posts/jqでファイルの内容をjsonの値として取り込む.adoc     コマンド   参考   How to have \u0026#39;git log\u0026#39; show filenames like \u0026#39;svn log -v\u0026#39;\n     ","permalink":"https://szk302.dev/posts/Git%E3%81%A7%E7%9B%B4%E8%BF%91%E3%81%AB%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%81%95%E3%82%8C%E3%81%9F%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E3%83%91%E3%82%B9%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/","summary":"Gitで直近にコミットされたファイルのパスを取得した。 git log --pretty=\u0026#34;\u0026#34; -1 --name-only -- *.adoc 表示結果 posts/jqでファイルの内容をjsonの値として取り込む.a","title":"Gitで直近にコミットされたファイルのパスを取得する"},{"content":"ファイルの内容を改行などをエスケープしつつjsonの項目のvalueとして取り込みたい\n   対応 rawfileオプションを使用する\n  rawfile  指定されたファイルを読み込み、その内容を指定されたグローバル変数にバインドする\n   指定方法は --rawfile 変数名 読み込みファイルパス\n import.txt abc \u0026#34;def\u0026#34; hij   base.json { \u0026#34;title\u0026#34;: \u0026#34;Sample json\u0026#34;, \u0026#34;body\u0026#34;: { \u0026#34;storage\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;\u0026#34; } } }   rawfileオプション付きjq実行 jq \u0026#39;.body.storage.value |=$value\u0026#39; --rawfile value ./import.txt base.json   結果 { \u0026#34;title\u0026#34;: \u0026#34;Sample json\u0026#34;, \u0026#34;body\u0026#34;: { \u0026#34;storage\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;abc\\r\\n\\\u0026#34;def\\\u0026#34;\\r\\nhij\u0026#34; } } }     参考   jq Manual (development version)\n     ","permalink":"https://szk302.dev/posts/jq%E3%81%A7%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%86%85%E5%AE%B9%E3%82%92json%E3%81%AE%E5%80%A4%E3%81%A8%E3%81%97%E3%81%A6%E5%8F%96%E3%82%8A%E8%BE%BC%E3%82%80/","summary":"ファイルの内容を改行などをエスケープしつつjsonの項目のvalueとして取り込みたい 対応 rawfileオプションを使用する rawfile 指定されたファ","title":"jqでファイルの内容をjsonの値として取り込む"},{"content":"プライバシーポリシー 当ブログでは、Googleによるアクセス解析ツール「Googleアナリティクス」を使用しています。このGoogleアナリティクスはデータの収集のためにCookieを使用しています。このデータは匿名で収集されており、個人を特定するものではありません。 この機能はCookieを無効にすることで収集を拒否することが出来ますので、お使いのブラウザの設定をご確認ください。この規約に関しての詳細は Googleアナリティクスサービス利用規約 のページや Googleポリシーと規約 ページをご覧ください。\n   その他   Amazonのアソシエイトとして、[Szk302 Teck Blog] は適格販売により収入を得ています。\n     ","permalink":"https://szk302.dev/fixed/blog/","summary":"プライバシーポリシー 当ブログでは、Googleによるアクセス解析ツール「Googleアナリティクス」を使用しています。このGoogleアナリ","title":"このブログについて"},{"content":"コマンド git grep -il TODO | xargs -n1 git blame --show-name | grep -i TODO   git grep パターンに一致する行を表示する\n オプション  -i  パターンとファイルの大文字と小文字の違いを無視\n -l  一致したすべての行を表示する代わりに、一致を含む（または含まない）ファイルの名前のみを表示\n     xargs 標準入力やファイルからリストを読み込み、コマンドラインを作成して実行する\n オプション  -n  xargs引数コマンド に渡す引数の最大値を指定\n     git blame ファイルの各行を最後に変更したリビジョンと作成者を表示\n オプション  --show-name  元のコミットでファイル名を表示する\n       参考   git-blame *\n     ","permalink":"https://szk302.dev/posts/%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%AB%E8%A8%98%E8%BF%B0%E3%81%95%E3%82%8C%E3%81%9FTodo%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AE%E4%B8%80%E8%A6%A7%E3%82%92Author%E3%81%A8%E4%B8%80%E7%B7%92%E3%81%AB%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B/","summary":"コマンド git grep -il TODO | xargs -n1 git blame --show-name | grep -i TODO git grep パターンに一致する行を表示する オプション -i パターンとファイルの大文字と小文字の違いを無視 -l 一致したす","title":"ソースに記述されたTodoコメントの一覧をAuthorと一緒に表示する"},{"content":"Yarnでスクリプト実行時にWindowsやLinux環境を考慮せずに環境変数を指定したい。 CROSS-ENVを使用するとマルチ環境で環境変数を指定できるようだ。\n   インストール yarn add --dev cross-env     定義 { \u0026#34;scripts\u0026#34;: { \u0026#34;deploy\u0026#34;: \u0026#34;cross-env NODE_ENV=\\\u0026#34;production\\\u0026#34; node build-scripts/deploy.js\u0026#34; } }     ","permalink":"https://szk302.dev/posts/CROSS-ENV%E3%81%A7%E7%92%B0%E5%A2%83%E3%81%AB%E9%96%A2%E4%BF%82%E3%81%AA%E3%81%8F%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%A6Yarn%E3%81%AE%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B/","summary":"Yarnでスクリプト実行時にWindowsやLinux環境を考慮せずに環境変数を指定したい。 CROSS-ENVを使用するとマルチ環境で環境変","title":"CROSS-ENVで環境に関係なく環境変数を指定してYarnのスクリプトを実行する"},{"content":"react-app-rewiredでビルドしたときに、クラス名にハッシュ値がつく。 結局使用したかったが、このクラス名を固定化したかった。\n localIdentName を指定して見たが、固定化できなかった。 getLocalIdent を使用すると変更できた。\n   参考   getLocalIdent\n  Modify output of localIdentName / getLocalIdent\n     ","permalink":"https://szk302.dev/posts/react-app-rewired%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%9F%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AEclass%E5%90%8D%E3%82%92%E5%9B%BA%E5%AE%9A%E5%8C%96%E3%81%97%E3%81%9F%E3%81%84/","summary":"react-app-rewiredでビルドしたときに、クラス名にハッシュ値がつく。 結局使用したかったが、このクラス名を固定化したかった。 localIdentName を","title":"react-app-rewiredでビルドしたコードのclass名を固定化したい"},{"content":"軽くデバッグするために標準出力に出す方法を調べた\n package main import \u0026#34;log\u0026#34; func main() { log.Println(\u0026#34;ログ\u0026#34;) }   ","permalink":"https://szk302.dev/posts/Go%E3%81%A7%E6%A8%99%E6%BA%96%E5%87%BA%E5%8A%9B%E3%81%AB%E3%83%AD%E3%82%B0%E3%82%92%E5%87%BA%E5%8A%9B%E3%81%99%E3%82%8B/","summary":"軽くデバッグするために標準出力に出す方法を調べた package main import \u0026#34;log\u0026#34; func main() { log.Println(\u0026#34;ログ\u0026#34;) }","title":"Goで標準出力にログを出力する"},{"content":"一時的にcloneしたリポジトリに対しコミットしたい場合に名前とメールアドレスを変えたかったので調査\n `-c`オプションをつけてコマンドを実行\n git -c user.name=\u0026#39;名前\u0026#39; -c user.email=\u0026#39;名前@example.com\u0026#39; commit -m \u0026#39;メッセージ\u0026#39;     参考   Commit without setting user.email and user.name\n     ","permalink":"https://szk302.dev/posts/Git%E3%81%A7%E4%B8%80%E6%99%82%E7%9A%84%E3%81%AB%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E6%99%82%E3%81%AE%E5%90%8D%E5%89%8D%E3%81%A8%E3%83%A1%E3%83%BC%E3%83%AB%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B/","summary":"一時的にcloneしたリポジトリに対しコミットしたい場合に名前とメールアドレスを変えたかったので調査 `-c`オプションをつけてコマンドを実行","title":"Gitで一時的にコミット時の名前とメールアドレスを変更する"},{"content":"このBlogを構築するにあたりGitHubActionsを利用した。\n コンテンツ用リポジトリとHugoの環境のリポジトリを分けており、 コンテンツに投稿するとコンテンツ用リポジトリのWorkflowが動きHugoの環境のリポジトリのWorkflowを呼び出す形になっている\n JenkinsのJobから別Jobを呼び出すものとは違い単純に他のリポジトリのworkflowのymlを使用して、実行しているリポジトリのWorkflowとして使う形になるようだ。\n + Secretsも呼び出される側のリポジトリ(dev-blog-builder)で指定していたが、呼び出し側で実行時に指定しなければならず、呼び出される側にも workflow_call.inputs に定義する必要がある\n + また、成果物も呼び出している側のWorkflowの成果物として扱われる\n   実装   呼び出す側\n blog-content/.github/workflows/update-dev-blog.yml\n      name: Update Szk302 dev blog on: push: branches: [ main ] pull_request: branches: [ main ] jobs: build_dev_blog: uses: \u0026#34;szk302/dev-blog-builder/.github/workflows/build.yml@main\u0026#34; with: hugo_version: \u0026#39;0.80.0\u0026#39; asciidoctor_version: \u0026#39;1.14.0\u0026#39; secrets: CR_PAT: ${{ secrets.CR_PAT }} # コンテナリポジトリ用 GR_PAT: ${{ secrets.GR_PAT }} # GitHubリポジトリ用     呼び出される側\n dev-blog-builder/.github/workflows/build.yml\n      name: Build Szk302 dev blog on: workflow_dispatch: inputs: hugo_version: description: \u0026#39;Hugo version\u0026#39; default: \u0026#39;0.80.0\u0026#39; required: false asciidoctor_version: description: \u0026#39;Hugo version\u0026#39; default: \u0026#39;1.14.0\u0026#39; required: false workflow_call: inputs: hugo_version: description: \u0026#39;Hugo version\u0026#39; default: \u0026#39;\u0026#39; required: false type: string asciidoctor_version: description: \u0026#39;Hugo version\u0026#39; default: \u0026#39;\u0026#39; required: false type: string secrets: CR_PAT: required: true GR_PAT: required: true jobs: build: runs-on: ubuntu-latest container: # image: ghcr.io/szk302/dev-blog-builder:hugo-${{ github.event.inputs.hugo_version }}_asciidoctor-${{ github.event.inputs.asciidoctor_version }} image: ghcr.io/szk302/dev-blog-builder:hugo-${{ inputs.hugo_version }}_asciidoctor-${{ inputs.asciidoctor_version }} credentials: username: ${{ github.repository_owner }} password: ${{ secrets.CR_PAT }} steps: - name: Checkout uses: actions/checkout@v2 with: github_token: ${{ secrets.GR_PAT }} branch: main repository: ${{ github.repository_owner }}/dev-blog-builder - name: Fetch content run: git submodule update --init --recursive --remote - name: Build dev blog run: hugo --destination public - name: Archive generated html uses: actions/upload-artifact@v2 with: name: dev-blog-html path: public commit: runs-on: ubuntu-latest needs: build steps: - name: Checkout uses: actions/checkout@v2 with: repository: ${{ github.repository_owner }}/dev-blog-html persist-credentials: false fetch-depth: 0 - name: Download math result for job 1 uses: actions/download-artifact@v2 with: name: dev-blog-html path: public - name: Commit files run: | git config --local user.email \u0026#34;69619077+github-actions[bot]@users.noreply.github.com\u0026#34; git config --local user.name \u0026#34;github-actions[bot]\u0026#34; git add public git diff-index --quiet HEAD || git commit -m \u0026#39;Auto commit\u0026#39; - name: Push changes uses: ad-m/github-push-action@master with: github_token: ${{ secrets.GR_PAT }} branch: main repository: ${{ github.repository_owner }}/dev-blog-html     参考   GitHub Actions/Learn GitHub Actions/Reusing workflows\n  GitHub Actionsのワークフロー再利用を試してみる\n  Reusable Workflows, Secrets and Environments\n     ","permalink":"https://szk302.dev/posts/GitHubActions%E3%81%A7Workflow%E3%81%8B%E3%82%89%E5%88%A5%E3%81%AE%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AEWorkflow%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B/","summary":"このBlogを構築するにあたりGitHubActionsを利用した。 コンテンツ用リポジトリとHugoの環境のリポジトリを分けており、 コンテン","title":"GitHubActionsでWorkflowから別のリポジトリのWorkflowを使用する"},{"content":"あるJobでビルドしてartifactとしてアップロードし、別のJobでアップロードしたartifactを使用した\n   実装 actions/checkout@v2を使うとすぐにできた。 Job間の実行順の制御が必要なため、 needs: build を指定している。\n  dev-blog-builder/.github/workflows/build.yml\n   name: Build Szk302 dev blog on: workflow_dispatch: inputs: hugo_version: description: \u0026#39;Hugo version\u0026#39; default: \u0026#39;0.80.0\u0026#39; required: false asciidoctor_version: description: \u0026#39;Hugo version\u0026#39; default: \u0026#39;1.14.0\u0026#39; required: false workflow_call: inputs: hugo_version: description: \u0026#39;Hugo version\u0026#39; default: \u0026#39;\u0026#39; required: false type: string asciidoctor_version: description: \u0026#39;Hugo version\u0026#39; default: \u0026#39;\u0026#39; required: false type: string secrets: CR_PAT: required: true GR_PAT: required: true jobs: build: runs-on: ubuntu-latest container: image: ghcr.io/szk302/dev-blog-builder:hugo-${{ inputs.hugo_version }}_asciidoctor-${{ inputs.asciidoctor_version }} credentials: username: ${{ github.repository_owner }} password: ${{ secrets.CR_PAT }} steps: - name: Checkout uses: actions/checkout@v2 with: github_token: ${{ secrets.GR_PAT }} branch: main repository: ${{ github.repository_owner }}/dev-blog-builder - name: Fetch content run: git submodule update --init --recursive --remote - name: Build dev blog run: hugo --destination public - name: Archive generated html uses: actions/upload-artifact@v2 with: name: dev-blog-html path: public commit: runs-on: ubuntu-latest needs: build steps: - name: Checkout uses: actions/checkout@v2 with: repository: ${{ github.repository_owner }}/dev-blog-html persist-credentials: false fetch-depth: 0 - name: Download math result for job 1 uses: actions/download-artifact@v2 with: name: dev-blog-html path: public - name: Commit files run: | git config --local user.email \u0026#34;69619077+github-actions[bot]@users.noreply.github.com\u0026#34; git config --local user.name \u0026#34;github-actions[bot]\u0026#34; git add public git diff-index --quiet HEAD || git commit -m \u0026#39;Auto commit\u0026#39; - name: Push changes uses: ad-m/github-push-action@master with: github_token: ${{ secrets.GR_PAT }} branch: main repository: ${{ github.repository_owner }}/dev-blog-html     参考   actions/download-artifact\n     ","permalink":"https://szk302.dev/posts/GitHubActions%E3%81%A7%E5%88%A5%E3%81%AEJob%E3%81%AE%E6%88%90%E6%9E%9C%E7%89%A9%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B/","summary":"あるJobでビルドしてartifactとしてアップロードし、別のJobでアップロードしたartifactを使用した 実装 actions/che","title":"GitHubActionsで別のJobの成果物を利用する"},{"content":"GoのPercent-encoding用関数はPath用とQuery用の2種類ある。\n   Path用\n  url.PathEscape()\n  url.PathUnescape()\n     Query用\n  url.QueryEscape()\n  url.QueryUnescape()\n        参考   Go言語/パッケージ url\n     ","permalink":"https://szk302.dev/posts/Go%E3%81%AEPercent-encoding%E7%94%A8%E9%96%A2%E6%95%B0%E3%81%AFPath%E7%94%A8%E3%81%A8Query%E7%94%A8%E3%81%AE2%E7%A8%AE%E9%A1%9E%E3%81%82%E3%82%8B/","summary":"GoのPercent-encoding用関数はPath用とQuery用の2種類ある。 Path用 url.PathEscape() url.PathUnescape() Query用 url.QueryEscape() url.QueryUnescape() 参考 Go言語/パッケージ url","title":"GoのPercent-encoding用関数はPath用とQuery用の2種類ある"},{"content":"PlantUMLの配置 -と–について - の数で階層が変わる\n デフォルト設定では下方向に階層が広がる\n   Note  分かりやすいようアルファベットの隣に階層の番号をつけた     @startuml A1 - B1 A1 -- C2 A1 -- D2 C2 - E2 @enduml     階層の条件   指定された最長の階層が優先される\n   同じオブジェクトに対して別々の階層で指定してみる\n @startuml A1 -- C2 C2 -- D3 A1 - D3 @enduml     A1と同じ階層にD3を指定したがC2の下の階層になった\n 今度はA1からD3を2階層下に指定\n @startuml A1 -- C2 C2 - D3 A1 --- D3 @enduml     D3は指定どおり2階層下に配置された。\n  表示位置の指定 同じ階層に置いたオブジェクトは記述した下から順に並んだ\n @startuml A1 - B1 A1 - C1 A1 - D1 @enduml     表示位置を指定する\n   @startuml A1 -- C2 C2 -- B3 A1 -up- B3 @enduml   表示位置指定のほうが強い\n       ","permalink":"https://szk302.dev/posts/Plantuml%E3%81%A7%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%B8%A6%E3%81%B3%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/","summary":"PlantUMLの配置 -と–について - の数で階層が変わる デフォルト設定では下方向に階層が広がる Note 分かりやすいようアルファベットの隣に階層の番","title":"PlantUMLでオブジェクトの並びを試してみる"},{"content":"時々Node.jsでモジュールなしかつ同期的にファイル一覧を取得する必要があるので書いた。\n   実装  file一覧\n   const fs = require(\u0026#34;fs\u0026#34;); const path = require(\u0026#34;path\u0026#34;); const targetDirpath = \u0026#34;./target\u0026#34;; function listFiles(dir) { return fs .readdirSync(dir, { withFileTypes: true }) .flatMap((dirent) =\u0026gt; { const filePath = path.join(dir, dirent.name); if (dirent.isFile()) { return [filePath]; } return listFiles(filePath); }); } const filePathList = listFiles(targetDirpath); console.log(filePathList)     確認  tree ./target/\n   ./target/ └── bbb ├── ccc.txt ├── ddd │ └── bbb │ └── aaa.txt ├── empty ※ディレクトリ └── ggg └── xyz ※ファイル   + . node fileList.js\n szk@X1:/mnt/c/Users/szk/tmp/sample$ node fileList.js [ \u0026#39;target/bbb/ccc.txt\u0026#39;, \u0026#39;target/bbb/ddd/bbb/aaa.txt\u0026#39;, \u0026#39;target/bbb/ggg/xyz\u0026#39; ]     ","permalink":"https://szk302.dev/posts/Node.js%E3%81%A7%E5%90%8C%E6%9C%9F%E7%9A%84%E3%81%AB%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E4%B8%80%E8%A6%A7%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/","summary":"時々Node.jsでモジュールなしかつ同期的にファイル一覧を取得する必要があるので書いた。 実装 file一覧 const fs = require(\u0026#34;fs\u0026#34;); const path = require(\u0026#34;path\u0026#34;); const targetDirpath = \u0026#34;./target\u0026#34;; function listFiles(dir) { return fs","title":"Node.jsで同期的にファイル一覧を取得する"},{"content":"忘れやすいので以下の条件のリンクをここに貼り付ける\n   リンクに記載されている内容通りの作業しかしていない場合\n  探したサイト\n     Design アイソメトリック   Icograms Designer\n  立体系のiconを探したときに見つけたサイト\n         Service GitHub   ワークフローの成果物をダウンロードする\n      Ansible   Windows modules\n     Powershell   Wi-Fiのパスワードを表示するワンライナー\n     AWS   Amazon ECR Public Gallery\n  Amazon リソースネーム (ARN)\n  shortjared/list.txt/List of AWS Service Principals\n     ","permalink":"https://szk302.dev/fixed/link-memo/","summary":"忘れやすいので以下の条件のリンクをここに貼り付ける リンクに記載されている内容通りの作業しかしていない場合 探したサイト Design アイソメトリック Icograms Designer 立","title":"リンクメモ"},{"content":"WSL2上でコミットしてpushすると毎回認証を聞かれるため調査\n   対応  /usr/bin/git-credential-manager を編集し以下を追加\n#!/bin/sh exec /mnt/c/Program\\ Files/Git/mingw64/libexec/git-core/git-credential-manager.exe $@     権限を変更\n  sudo chmod +x /usr/bin/git-credential-manager`\n     $HOME/.gitconfig を編集\n[credential] helper = manager        参考   Use the Windows Git Credential Provider in WSL\n     ","permalink":"https://szk302.dev/posts/WSL2%E4%B8%8A%E3%81%A7push%E3%81%99%E3%82%8B%E3%81%A8Git%E3%81%AE%E8%AA%8D%E8%A8%BC%E3%81%8C%E6%AF%8E%E5%9B%9E%E8%B5%B0%E3%82%8B/","summary":"WSL2上でコミットしてpushすると毎回認証を聞かれるため調査 対応 /usr/bin/git-credential-manager を編集し以下を追加 #!/bin/sh exec /mnt/c/Program\\ Files/Git/mingw64/libexec/git-core/git-credential-manager.exe $@ 権限を変更 sudo chmod +x /usr/bin/git-credential-manager` $HOME/.gitconfig を編集 [credential] helper = manager 参考 Use the","title":"WSL2上でpushするとGitの認証が毎回走る"},{"content":"contentをsubmoduleとして登録してあり削除する。\n Console szk@X1:~/szk302/dev-blog-builder$ tree -L 1 . ├── archetypes ├── config.yml ├── content // submodule ├── environment ├── layouts ├── public ├── resources ├── themes └── tool_version.env 7 directories, 2 files   Console git submodule deinit -f content git rm -f content rm -rf .git/modules/content   ","permalink":"https://szk302.dev/posts/GitSubmodule%E3%82%92%E5%89%8A%E9%99%A4/","summary":"contentをsubmoduleとして登録してあり削除する。 Console szk@X1:~/szk302/dev-blog-builder$ tree -L 1 . ├── archetypes ├── config.yml ├── content // submodule ├── environment ├── layouts ├── public ├── resources ├──","title":"GitSubmoduleを削除"},{"content":"Hugoでhtmlを生成した際に大文字のファイル名で生成したところ、パスが小文字となり画像が表示されない問題が発生 config.ymlにオプション disablePathToLower を指定することで大文字のままhtmlを出力できた。\n   参考   Configure Hugo/disablePathToLower\n  Url is downcased #557\n     ","permalink":"https://szk302.dev/posts/Hugo%E3%81%A7html%E3%82%92%E7%94%9F%E6%88%90%E3%81%97%E3%81%9F%E9%9A%9B%E3%81%AB%E3%83%91%E3%82%B9%E3%81%8C%E5%B0%8F%E6%96%87%E5%AD%97%E3%81%AB%E3%81%AA%E3%82%8B/","summary":"Hugoでhtmlを生成した際に大文字のファイル名で生成したところ、パスが小文字となり画像が表示されない問題が発生 config.ymlにオプ","title":"Hugoでhtmlを生成した際にパスが小文字になる"},{"content":"CloudflarePagesにはデフォルトでcacheが組み込まれているらしい。 Webサイト側のcacheはいらないようなのでRuleで無効化した。(※ルール以外で無効化する方法がわからなかった)\n   手順  Webサイトの画面を表示しルールのページルールから[ページルールを作成]をクリック\n  \n     以下の項目を設定\n  URLが一致する場合: *.szk302.dev/*\n  その後の設定は: キャッシュレベル スキップ\n  \n     [保存]ボタンを押下\n     参考   Caching and performance\n  Disable Cloudflare caching completly\n     ","permalink":"https://szk302.dev/posts/Cloudflare%E3%81%AEWeb%E3%82%B5%E3%82%A4%E3%83%88%E8%A8%AD%E5%AE%9A%E3%81%A7cache%E3%82%92%E7%84%A1%E5%8A%B9%E3%81%AB%E3%81%99%E3%82%8B/","summary":"CloudflarePagesにはデフォルトでcacheが組み込まれているらしい。 Webサイト側のcacheはいらないようなのでRuleで無","title":"CloudflareのWebサイト設定でcacheを無効にする"},{"content":"設定画面(Settings/Developer settings/Personal access tokens)からGithubPackages用のPATを作成しようとすると、 repo のスコープのアクセス許可が追加されてしまう。 以下のアドレスからアクセスすることで、`packages`のスコープのみ追加できる\n   https://github.com/settings/tokens/new?scopes=write:packages\n     参考   個人アクセストークンを使用する\n     ","permalink":"https://szk302.dev/posts/GitHub%E3%81%AEPackages%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E7%94%A8PAT%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E8%A8%B1%E5%8F%AF%E3%82%92packages%E3%81%AE%E3%81%BF%E3%81%AB%E5%88%B6%E9%99%90%E3%81%99%E3%82%8B/","summary":"設定画面(Settings/Developer settings/Personal access tokens)からGithubPackages用のPATを作成しようとすると、 repo のスコープ","title":"GitHubのPackagesアクセス用PATのアクセス許可をpackagesのみに制限する"},{"content":"git submodule update してもsubmoduleがupdateがされない。\n 最初に行ったsubmoduleの追加方法が悪いようだった。\n   対応  以下のようにブランチを指定して追加\ngit submodule add -b ブランチ名 リポジトリアドレス パス     親リポジトリで git submodule update --remote コマンドでsubmoduleのリポジトリを最新化\n     ","permalink":"https://szk302.dev/posts/GitSubmodule%E3%81%A7%E8%A6%AA%E3%81%AE%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%A7update%E3%81%97%E3%81%A6%E3%82%82%E5%AD%90%E3%81%8C%E5%90%8C%E6%9C%9F%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84/","summary":"git submodule update してもsubmoduleがupdateがされない。 最初に行ったsubmoduleの追加方法が悪いようだった。 対応 以下のようにブランチを","title":"GitSubmoduleで親のリポジトリでupdateしても子が同期されない"},{"content":"Cloudflareでこのブログをホスティングしたところ、cssファイルのダウンロードがされず画面が崩れた。\n   対応 Webサイトの設定からキャッシュをパージする。\n  Webサイトの設定画面を表示\n  [キャッシュをパージ]をクリック\n  \n     [すべてパージ]をクリック\n  \n        確認   自分のブラウザのキャッシュを消して再表示\n     発生したブラウザのコンソールのエラー Failed to find a valid digest in the \u0026#39;integrity\u0026#39; attribute for resource \u0026#39;https://szk302.dev/assets/css/stylesheet.min.61dfb3f0b4cda95d2ccb867f9a3b244ce5d23e12492bcc3c277df594c7bc1adf.css\u0026#39; with computed SHA-256 integrity \u0026#39;QGnSnhEdLT7Y+NlgDiW6AvlhSlFVwPYr2z3i9eimKWU=\u0026#39;. The resource has been blocked.     参考   Failed to find a valid digest in the integrity attribute #114\n     ","permalink":"https://szk302.dev/posts/Cloudflare%E3%81%A7%E3%83%9B%E3%82%B9%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%97%E3%81%A6%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5%E3%81%97%E3%81%9F%E9%9A%9B%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%A7CSS%E3%81%A0%E3%81%91%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%81%95%E3%82%8C%E3%82%8B/","summary":"Cloudflareでこのブログをホスティングしたところ、cssファイルのダウンロードがされず画面が崩れた。 対応 Webサイトの設定からキャッ","title":"Cloudflareでホスティングしてキャッシュした際ブラウザでCSSだけダウンロードブロックされる"},{"content":"自動コミットを作成した際に、差分がない場合にコミットすると終了コードが1になり失敗する 差分がある場合にだけCommitするようにしたい。\n git add -A git diff-index --quiet HEAD || git commit -m \u0026#39;Auto commit\u0026#39;     参考   stackoverflow/How to git commit nothing without an error?\n     ","permalink":"https://szk302.dev/posts/Git%E3%81%A7%E5%B7%AE%E5%88%86%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%A0%E3%81%91%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%81%99%E3%82%8B/","summary":"自動コミットを作成した際に、差分がない場合にコミットすると終了コードが1になり失敗する 差分がある場合にだけCommitするようにしたい。 git add","title":"Gitで差分がある場合だけコミットする"},{"content":"react-app-rewiredで作られたプロジェクトでwebpack-bundle-analyzerを使用したかったので調査\n   環境   react: 17.0.1\n  webpack: 4.44.2\n  react-app-rewired: 2.1.8\n     方法 byzyk/react-app-rewire-webpack-bundle-analyzer を使用する\n  インストール\n  yarn add --dev react-app-rewire-webpack-bundle-analyzer\n     config-overrides.jsに以下のように記述\nconst rewireWebpackBundleAnalyzer = require(\u0026#39;react-app-rewire-webpack-bundle-analyzer\u0026#39;) module.exports = function override(config, env) { // ... if (env === \u0026#39;production\u0026#39;) { config = rewireWebpackBundleAnalyzer(config, env, { analyzerMode: \u0026#39;static\u0026#39;, reportFilename: \u0026#39;report.html\u0026#39; }) } return config }     yarn build でビルド終了後、ブラウザが立ち上がり結果が表示される\n     参考   byzyk/react-app-rewire-webpack-bundle-analyzer\n     ","permalink":"https://szk302.dev/posts/react-app-rewired%E3%81%A7webpack-bundle-analyzer%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B/","summary":"react-app-rewiredで作られたプロジェクトでwebpack-bundle-analyzerを使用したかったので調査 環境 react: 17.0.1 webpack: 4.44.2","title":"react-app-rewiredでwebpack-bundle-analyzerを使用する"},{"content":"Reactで書いたコードに含まれているconsole.logをwebpackのビルド時に消したいという要望があったので調査\n   環境  react  17.0.1\n webpack  4.44.2\n terser-webpack-plugin  4.2.3\n     設定 console.* 系すべてを消す場合 terserOptionsのcompressに drop_console=true を設定する\n { terserOptions:{ cache: true, parallel: true, sourceMap: false, compress:{ drop_console: true, } } }    console.log,infoだけ消す場合 terserOptionsのcompressに pure_funcs=[\u0026#39;console.log\u0026#39;,\u0026#39;console.info\u0026#39;] を設定する\n { terserOptions:{ cache: true, parallel: true, sourceMap: false, compress:{ pure_funcs: [ \u0026#39;console.log\u0026#39;, \u0026#39;console.info\u0026#39; ] } } }      参考   Remove console.log with TerserWebpackPlugin\n  terser/terser\n  webpack/TerserWebpackPlugin\n     ","permalink":"https://szk302.dev/posts/Webpack%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89%E6%99%82%E3%81%ABconsole.log%E3%82%92%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B/","summary":"Reactで書いたコードに含まれているconsole.logをwebpackのビルド時に消したいという要望があったので調査 環境 react 17.0.1 webpack 4.44.2 terser-webpack-plugin 4.2.3 設","title":"Webpackでビルド時にconsole.logを削除する"},{"content":"Webpackでビルド時に生成されるファイルを300kb以下に抑えたいという要望があったので調査\n   環境  react  17.0.1\n webpack  4.44.2\n terser-webpack-plugin  4.2.3\n     設定 以下のパラメータ設定をしたところ、ファイル数とファイルサイズが要望通りに収まった\n   minSize: 100000,\n  maxSize: 300000,\n  maxInitialRequests: 10,\n   { optimization: { splitChunks: { chunks: \u0026#39;initial\u0026#39;, minSize: 100000, maxSize: 300000, maxInitialRequests: 10, cacheGroups: { vendor: { test: /[\\\\/]node_modules[\\\\/]/, reuseExistingChunk: true, name(module,chunks,cacheGroupKey) { const allChunksHashes = chunks.map((item)=\u0026gt;item.hash).join(\u0026#39;~\u0026#39;); return `${cacheGroupKey}${allChunksHashes}` } }, }, }, }, }   ファイルは以下のようなファイル名で出力された。\n   main~ハッシュ値1.chunk.js\n  main~ハッシュ値1.chunk.js.map\n  main~ハッシュ値2.chunk.js\n  main~ハッシュ値2.chunk.js.map\n  runtime-main.ハッシュ値.js\n  runtime-main.ハッシュ値.js.map\n  vendor~ハッシュ値1.js\n  vendor~ハッシュ値1.js.map\n  vendor~ハッシュ値2.js\n  vendor~ハッシュ値2.js.map\n     参考   webpack/SplitChunksPlugin *\n     ","permalink":"https://szk302.dev/posts/Webpack%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89%E6%99%82%E3%81%ABSplitChunksPlugin%E3%81%A7%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%88%86%E5%89%B2%E3%82%92%E8%A1%8C%E3%81%86/","summary":"Webpackでビルド時に生成されるファイルを300kb以下に抑えたいという要望があったので調査 環境 react 17.0.1 webpack 4.44.2 terser-webpack-plugin 4.2.3 設定 以下のパラメータ設定をし","title":"Webpackでビルド時にSplitChunksPluginでファイル分割を行う"},{"content":"Gravatarに登録したプロフィール画像のURL取得方法を調査した。\n MD5のハッシュ値(小文字)に変換して https://www.gravatar.com/avatar/ につなげることでプロフィール画像のURLになる\n 以下、Powershellのスクリプト\n $email = \u0026#34;メールアドレス\u0026#34; $stream = [IO.MemoryStream]::new([Text.Encoding]::UTF8.GetBytes($email.Trim().ToLower())) $hash = (Get-FileHash -InputStream $stream -Algorithm MD5).Hash.toLower() echo \u0026#34;https://www.gravatar.com/avatar/$hash\u0026#34;     参考   Gravatar/Creating the Hash\n     ","permalink":"https://szk302.dev/posts/Gravatar%E3%81%AB%E7%99%BB%E9%8C%B2%E3%81%97%E3%81%9F%E3%83%97%E3%83%AD%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E7%94%BB%E5%83%8F%E3%81%AEURL%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/","summary":"Gravatarに登録したプロフィール画像のURL取得方法を調査した。 MD5のハッシュ値(小文字)に変換して https://www.gravatar.com/avatar/ につなげることでプロフィール画","title":"Gravatarに登録したプロフィール画像のURLを取得する"},{"content":"URLの最後に ?s=ピルクセル数 をつける\n  100px(https://www.gravatar.com/avatar/d9669165d1baf624cedab4afc3dfcc42?s=100)  \n 200px(https://www.gravatar.com/avatar/d9669165d1baf624cedab4afc3dfcc42?s=200)  \n     参考   Gravatar/Image Requests\n     ","permalink":"https://szk302.dev/posts/Gravatar%E3%81%AB%E7%99%BB%E9%8C%B2%E3%81%97%E3%81%9F%E3%83%97%E3%83%AD%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E7%94%BB%E5%83%8F%E3%81%AE%E3%82%B5%E3%82%A4%E3%82%BA%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B/","summary":"URLの最後に ?s=ピルクセル数 をつける 100px(https://www.gravatar.com/avatar/d9669165d1baf624cedab4afc3dfcc42?s=100) 200px(https://www.gravatar.com/avatar/d9669165d1baf624cedab4afc3dfcc42?s=200) 参考 Gravatar/Image Requests","title":"Gravatarに登録したプロフィール画像のサイズを指定する"},{"content":"以下のプルリクでPlantUMLが表示できるようになったようだ\n   rework external asciidoc integration #7281\n     対応 Gem経由でインストールしたAsciidocが対象とのことなので、ベースイメージを asciidoctor/docker-asciidoctor に変更し、 必要なモジュールを追加する。\n  Hugoを動かしているDockerファイルにモジュールを追加\nRUN apk add --no-cache ruby-dev alpine-sdk graphviz RUN gem install bundler json asciidoctor-html5s asciidoctor-diagram     config.ymlに以下のように設定を追加\n   markup: asciidocext: extensions: - asciidoctor-html5s - asciidoctor-diagram workingFolderCurrent: true trace: true attributes: my-base-url: \u0026#39;https://localhost/\u0026#39; my-attribute-name: my value     確認  hugo --destination 出力先ディレクトリ\n     参考   rework external asciidoc integration #7281\n     ","permalink":"https://szk302.dev/posts/Hugo%E3%81%A7AsciiDoc%E5%BD%A2%E5%BC%8F%E3%81%A7%E8%A8%98%E8%BF%B0%E3%81%97%E3%81%9FPlantumln%E3%81%AE%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B9%E5%9B%B3%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B/","summary":"以下のプルリクでPlantUMLが表示できるようになったようだ rework external asciidoc integration #7281 対応 Gem経由でインストールしたAsciidocが対象とのことなので","title":"HugoでAsciiDocファイルに記述したPlantUMLのシーケンス図を表示する"},{"content":"工事中\n ","permalink":"https://szk302.dev/fixed/profile/","summary":"工事中","title":"プロフィール"},{"content":"Awesome Open Source/hugo-themeなどからThemeを探してみた。\n スター数やシンプルなブログを考慮すると以下のThemeが残った。\n   Hugo Papermod\n  Loveit\n   fuseを使用してみたかったのでPapermodに決定\n   参考   Awesome Open Source/hugo-theme\n  Hugo Papermod\n  Loveit\n     ","permalink":"https://szk302.dev/posts/Blog%E3%81%AB%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8BTheme%E3%82%92%E6%B1%BA%E3%82%81%E3%82%8B/","summary":"Awesome Open Source/hugo-themeなどからThemeを探してみた。 スター数やシンプルなブログを考慮すると以下のThemeが残った。 Hugo Papermod Loveit","title":"Blogに使用するThemeを決める"}]