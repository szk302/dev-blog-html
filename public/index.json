[{"content":"一時的にcloneしたリポジトリに対しコミットしたい場合に名前とメールアドレスを変えたかったので調査\n `-c`オプションをつけてコマンドを実行\n git -c user.name=\u0026#39;名前\u0026#39; -c user.email=\u0026#39;名前@example.com\u0026#39; commit -m \u0026#39;メッセージ\u0026#39;     参考   Commit without setting user.email and user.name\n     ","permalink":"https://szk302.dev/posts/Git%E3%81%A7%E4%B8%80%E6%99%82%E7%9A%84%E3%81%AB%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E6%99%82%E3%81%AE%E5%90%8D%E5%89%8D%E3%81%A8%E3%83%A1%E3%83%BC%E3%83%AB%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B/","summary":"一時的にcloneしたリポジトリに対しコミットしたい場合に名前とメールアドレスを変えたかったので調査 `-c`オプションをつけてコマンドを実行","title":"Gitで一時的にコミット時の名前とメールアドレスを変更する"},{"content":"あるJobでビルドしてartifactとしてアップロードし、別のJobでアップロードしたartifactを使用した\n   実装 actions/checkout@v2を使うとすぐにできた。 Job間の実行順の制御が必要なため、 needs: build を指定している。\n  dev-blog-builder/.github/workflows/build.yml\n   name: Build Szk302 dev blog on: workflow_dispatch: inputs: hugo_version: description: \u0026#39;Hugo version\u0026#39; default: \u0026#39;0.80.0\u0026#39; required: false asciidoctor_version: description: \u0026#39;Hugo version\u0026#39; default: \u0026#39;1.14.0\u0026#39; required: false workflow_call: inputs: hugo_version: description: \u0026#39;Hugo version\u0026#39; default: \u0026#39;\u0026#39; required: false type: string asciidoctor_version: description: \u0026#39;Hugo version\u0026#39; default: \u0026#39;\u0026#39; required: false type: string secrets: CR_PAT: required: true GR_PAT: required: true jobs: build: runs-on: ubuntu-latest container: image: ghcr.io/szk302/dev-blog-builder:hugo-${{ inputs.hugo_version }}_asciidoctor-${{ inputs.asciidoctor_version }} credentials: username: ${{ github.repository_owner }} password: ${{ secrets.CR_PAT }} steps: - name: Checkout uses: actions/checkout@v2 with: github_token: ${{ secrets.GR_PAT }} branch: main repository: ${{ github.repository_owner }}/dev-blog-builder - name: Fetch content run: git submodule update --init --recursive --remote - name: Build dev blog run: hugo --destination public - name: Archive generated html uses: actions/upload-artifact@v2 with: name: dev-blog-html path: public commit: runs-on: ubuntu-latest needs: build steps: - name: Checkout uses: actions/checkout@v2 with: repository: ${{ github.repository_owner }}/dev-blog-html persist-credentials: false fetch-depth: 0 - name: Download math result for job 1 uses: actions/download-artifact@v2 with: name: dev-blog-html path: public - name: Commit files run: | git config --local user.email \u0026#34;69619077+github-actions[bot]@users.noreply.github.com\u0026#34; git config --local user.name \u0026#34;github-actions[bot]\u0026#34; git add public git diff-index --quiet HEAD || git commit -m \u0026#39;Auto commit\u0026#39; - name: Push changes uses: ad-m/github-push-action@master with: github_token: ${{ secrets.GR_PAT }} branch: main repository: ${{ github.repository_owner }}/dev-blog-html     参考   actions/download-artifact\n     ","permalink":"https://szk302.dev/posts/GitHubActions%E3%81%A7%E5%88%A5%E3%81%AEJob%E3%81%AE%E6%88%90%E6%9E%9C%E7%89%A9%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B/","summary":"あるJobでビルドしてartifactとしてアップロードし、別のJobでアップロードしたartifactを使用した 実装 actions/che","title":"GitHubActionsで別のJobの成果物を利用する"},{"content":"GoのPercent-encoding用関数はPath用とQuery用の2種類ある。\n   Path用\n  url.PathEscape()\n  url.PathUnescape()\n     Query用\n  url.QueryEscape()\n  url.QueryUnescape()\n        参考   Go言語/パッケージ url\n     ","permalink":"https://szk302.dev/posts/Go%E3%81%AEPercent-encoding%E7%94%A8%E9%96%A2%E6%95%B0%E3%81%AFPath%E7%94%A8%E3%81%A8Query%E7%94%A8%E3%81%AE2%E7%A8%AE%E9%A1%9E%E3%81%82%E3%82%8B/","summary":"GoのPercent-encoding用関数はPath用とQuery用の2種類ある。 Path用 url.PathEscape() url.PathUnescape() Query用 url.QueryEscape() url.QueryUnescape() 参考 Go言語/パッケージ url","title":"GoのPercent-encoding用関数はPath用とQuery用の2種類ある"},{"content":"PlantUMLの配置 -と–について - の数で階層が変わる\n デフォルト設定では下方向に階層が広がる\n   Note  分かりやすいようアルファベットの隣に階層の番号をつけた     @startuml A1 - B1 A1 -- C2 A1 -- D2 C2 - E2 @enduml     階層の条件   指定された最長の階層が優先される\n   同じオブジェクトに対して別々の階層で指定してみる\n @startuml A1 -- C2 C2 -- D3 A1 - D3 @enduml     A1と同じ階層にD3を指定したがC2の下の階層になった\n 今度はA1からD3を2階層下に指定\n @startuml A1 -- C2 C2 - D3 A1 --- D3 @enduml     D3は指定どおり2階層下に配置された。\n  表示位置の指定 同じ階層に置いたオブジェクトは記述した下から順に並んだ\n @startuml A1 - B1 A1 - C1 A1 - D1 @enduml     表示位置を指定する\n   @startuml A1 -- C2 C2 -- B3 A1 -up- B3 @enduml   表示位置指定のほうが強い\n       ","permalink":"https://szk302.dev/posts/Plantuml%E3%81%A7%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%B8%A6%E3%81%B3%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/","summary":"PlantUMLの配置 -と–について - の数で階層が変わる デフォルト設定では下方向に階層が広がる Note 分かりやすいようアルファベットの隣に階層の番","title":"PlantUMLでオブジェクトの並びを試してみる"},{"content":"時々Node.jsでモジュールなしかつ同期的にファイル一覧を取得する必要があるので書いた。\n   実装  file一覧\n   const fs = require(\u0026#34;fs\u0026#34;); const path = require(\u0026#34;path\u0026#34;); const targetDirpath = \u0026#34;./target\u0026#34;; function listFiles(dir) { return fs .readdirSync(dir, { withFileTypes: true }) .flatMap((dirent) =\u0026gt; { const filePath = path.join(dir, dirent.name); if (dirent.isFile()) { return [filePath]; } return listFiles(filePath); }); } const filePathList = listFiles(targetDirpath); console.log(filePathList)     確認  tree ./target/\n   ./target/ └── bbb ├── ccc.txt ├── ddd │ └── bbb │ └── aaa.txt ├── empty ※ディレクトリ └── ggg └── xyz ※ファイル   + . node fileList.js\n szk@X1:/mnt/c/Users/szk/tmp/sample$ node fileList.js [ \u0026#39;target/bbb/ccc.txt\u0026#39;, \u0026#39;target/bbb/ddd/bbb/aaa.txt\u0026#39;, \u0026#39;target/bbb/ggg/xyz\u0026#39; ]     ","permalink":"https://szk302.dev/posts/Node.js%E3%81%A7%E5%90%8C%E6%9C%9F%E7%9A%84%E3%81%AB%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E4%B8%80%E8%A6%A7%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/","summary":"時々Node.jsでモジュールなしかつ同期的にファイル一覧を取得する必要があるので書いた。 実装 file一覧 const fs = require(\u0026#34;fs\u0026#34;); const path = require(\u0026#34;path\u0026#34;); const targetDirpath = \u0026#34;./target\u0026#34;; function listFiles(dir) { return fs","title":"Node.jsで同期的にファイル一覧を取得する"},{"content":"忘れやすいので以下の条件のリンクをここに貼り付ける\n   公式サイトであること\n  リンクに記載されている内容通りの作業\n     Service GitHub   ワークフローの成果物をダウンロードする\n      ","permalink":"https://szk302.dev/fixed/link-memo/","summary":"忘れやすいので以下の条件のリンクをここに貼り付ける 公式サイトであること リンクに記載されている内容通りの作業 Service GitHub ワークフローの成果物をダウンロ","title":"リンクメモ"},{"content":"WSL2上でコミットしてpushすると毎回認証を聞かれるため調査\n   対応  /usr/bin/git-credential-manager を編集し以下を追加\n#!/bin/sh exec /mnt/c/Program\\ Files/Git/mingw64/libexec/git-core/git-credential-manager.exe $@     権限を変更\n  sudo chmod +x /usr/bin/git-credential-manager`\n     $HOME/.gitconfig を編集\n[credential] helper = manager        参考   Use the Windows Git Credential Provider in WSL\n     ","permalink":"https://szk302.dev/posts/WSL2%E4%B8%8A%E3%81%A7push%E3%81%99%E3%82%8B%E3%81%A8Git%E3%81%AE%E8%AA%8D%E8%A8%BC%E3%81%8C%E6%AF%8E%E5%9B%9E%E8%B5%B0%E3%82%8B/","summary":"WSL2上でコミットしてpushすると毎回認証を聞かれるため調査 対応 /usr/bin/git-credential-manager を編集し以下を追加 #!/bin/sh exec /mnt/c/Program\\ Files/Git/mingw64/libexec/git-core/git-credential-manager.exe $@ 権限を変更 sudo chmod +x /usr/bin/git-credential-manager` $HOME/.gitconfig を編集 [credential] helper = manager 参考 Use the","title":"WSL2上でpushするとGitの認証が毎回走る"},{"content":"contentをsubmoduleとして登録してあり削除する。\n Console szk@X1:~/szk302/dev-blog-builder$ tree -L 1 . ├── archetypes ├── config.yml ├── content // submodule ├── environment ├── layouts ├── public ├── resources ├── themes └── tool_version.env 7 directories, 2 files   Console git submodule deinit -f content git rm -f content rm -rf .git/modules/content   ","permalink":"https://szk302.dev/posts/GitSubmodule%E3%82%92%E5%89%8A%E9%99%A4/","summary":"contentをsubmoduleとして登録してあり削除する。 Console szk@X1:~/szk302/dev-blog-builder$ tree -L 1 . ├── archetypes ├── config.yml ├── content // submodule ├── environment ├── layouts ├── public ├── resources ├──","title":"GitSubmoduleを削除"},{"content":"Hugoでhtmlを生成した際に大文字のファイル名で生成したところ、パスが小文字となり画像が表示されない問題が発生 config.ymlにオプション disablePathToLower を指定することで大文字のままhtmlを出力できた。\n   参考   Configure Hugo/disablePathToLower\n  Url is downcased #557\n     ","permalink":"https://szk302.dev/posts/Hugo%E3%81%A7html%E3%82%92%E7%94%9F%E6%88%90%E3%81%97%E3%81%9F%E9%9A%9B%E3%81%AB%E3%83%91%E3%82%B9%E3%81%8C%E5%B0%8F%E6%96%87%E5%AD%97%E3%81%AB%E3%81%AA%E3%82%8B/","summary":"Hugoでhtmlを生成した際に大文字のファイル名で生成したところ、パスが小文字となり画像が表示されない問題が発生 config.ymlにオプ","title":"Hugoでhtmlを生成した際にパスが小文字になる"},{"content":"CloudflarePagesにはデフォルトでcacheが組み込まれているらしい。 Webサイト側のcacheはいらないようなのでRuleで無効化した。(※ルール以外で無効化する方法がわからなかった)\n   手順  Webサイトの画面を表示しルールのページルールから[ページルールを作成]をクリック\n  \n     以下の項目を設定\n  URLが一致する場合: *.szk302.dev/*\n  その後の設定は: キャッシュレベル スキップ\n  \n     [保存]ボタンを押下\n     参考   Caching and performance\n  Disable Cloudflare caching completly\n     ","permalink":"https://szk302.dev/posts/Cloudflare%E3%81%AEWeb%E3%82%B5%E3%82%A4%E3%83%88%E8%A8%AD%E5%AE%9A%E3%81%A7cache%E3%82%92%E7%84%A1%E5%8A%B9%E3%81%AB%E3%81%99%E3%82%8B/","summary":"CloudflarePagesにはデフォルトでcacheが組み込まれているらしい。 Webサイト側のcacheはいらないようなのでRuleで無","title":"CloudflareのWebサイト設定でcacheを無効にする"},{"content":"設定画面(Settings/Developer settings/Personal access tokens)からGithubPackages用のPATを作成しようとすると、 repo のスコープのアクセス許可が追加されてしまう。 以下のアドレスからアクセスすることで、`packages`のスコープのみ追加できる\n   https://github.com/settings/tokens/new?scopes=write:packages\n     参考   個人アクセストークンを使用する\n     ","permalink":"https://szk302.dev/posts/GitHub%E3%81%AEPackages%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E7%94%A8PAT%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E8%A8%B1%E5%8F%AF%E3%82%92packages%E3%81%AE%E3%81%BF%E3%81%AB%E5%88%B6%E9%99%90%E3%81%99%E3%82%8B/","summary":"設定画面(Settings/Developer settings/Personal access tokens)からGithubPackages用のPATを作成しようとすると、 repo のスコープ","title":"GitHubのPackagesアクセス用PATのアクセス許可をpackagesのみに制限する"},{"content":"git submodule update してもsubmoduleがupdateがされない。\n 最初に行ったsubmoduleの追加方法が悪いようだった。\n   対応  以下のようにブランチを指定して追加\ngit submodule add -b ブランチ名 リポジトリアドレス パス     親リポジトリで git submodule update --remote コマンドでsubmoduleのリポジトリを最新化\n     ","permalink":"https://szk302.dev/posts/GitSubmodule%E3%81%A7%E8%A6%AA%E3%81%AE%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%A7update%E3%81%97%E3%81%A6%E3%82%82%E5%AD%90%E3%81%8C%E5%90%8C%E6%9C%9F%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84/","summary":"git submodule update してもsubmoduleがupdateがされない。 最初に行ったsubmoduleの追加方法が悪いようだった。 対応 以下のようにブランチを","title":"GitSubmoduleで親のリポジトリでupdateしても子が同期されない"},{"content":"Cloudflareでこのブログをホスティングしたところ、cssファイルのダウンロードがされず画面が崩れた。\n   対応 Webサイトの設定からキャッシュをパージする。\n  Webサイトの設定画面を表示\n  [キャッシュをパージ]をクリック\n  \n     [すべてパージ]をクリック\n  \n        確認   自分のブラウザのキャッシュを消して再表示\n     発生したブラウザのコンソールのエラー Failed to find a valid digest in the \u0026#39;integrity\u0026#39; attribute for resource \u0026#39;https://szk302.dev/assets/css/stylesheet.min.61dfb3f0b4cda95d2ccb867f9a3b244ce5d23e12492bcc3c277df594c7bc1adf.css\u0026#39; with computed SHA-256 integrity \u0026#39;QGnSnhEdLT7Y+NlgDiW6AvlhSlFVwPYr2z3i9eimKWU=\u0026#39;. The resource has been blocked.     参考   Failed to find a valid digest in the integrity attribute #114\n     ","permalink":"https://szk302.dev/posts/Cloudflare%E3%81%A7%E3%83%9B%E3%82%B9%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%97%E3%81%A6%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5%E3%81%97%E3%81%9F%E9%9A%9B%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%A7CSS%E3%81%A0%E3%81%91%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%81%95%E3%82%8C%E3%82%8B/","summary":"Cloudflareでこのブログをホスティングしたところ、cssファイルのダウンロードがされず画面が崩れた。 対応 Webサイトの設定からキャッ","title":"Cloudflareでホスティングしてキャッシュした際ブラウザでCSSだけダウンロードブロックされる"},{"content":"自動コミットを作成した際に、差分がない場合にコミットすると終了コードが1になり失敗する 差分がある場合にだけCommitするようにしたい。\n git add -A git diff-index --quiet HEAD || git commit -m \u0026#39;Auto commit\u0026#39;     参考   stackoverflow/How to git commit nothing without an error?\n     ","permalink":"https://szk302.dev/posts/Git%E3%81%A7%E5%B7%AE%E5%88%86%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%A0%E3%81%91%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%81%99%E3%82%8B/","summary":"自動コミットを作成した際に、差分がない場合にコミットすると終了コードが1になり失敗する 差分がある場合にだけCommitするようにしたい。 git add","title":"Gitで差分がある場合だけコミットする"},{"content":"react-app-rewiredで作られたプロジェクトでwebpack-bundle-analyzerを使用したかったので調査\n   環境   react: 17.0.1\n  webpack: 4.44.2\n  react-app-rewired: 2.1.8\n     方法 byzyk/react-app-rewire-webpack-bundle-analyzer を使用する\n  インストール\n  yarn add --dev react-app-rewire-webpack-bundle-analyzer\n     config-overrides.jsに以下のように記述\nconst rewireWebpackBundleAnalyzer = require(\u0026#39;react-app-rewire-webpack-bundle-analyzer\u0026#39;) module.exports = function override(config, env) { // ... if (env === \u0026#39;production\u0026#39;) { config = rewireWebpackBundleAnalyzer(config, env, { analyzerMode: \u0026#39;static\u0026#39;, reportFilename: \u0026#39;report.html\u0026#39; }) } return config }     yarn build でビルド終了後、ブラウザが立ち上がり結果が表示される\n     参考   byzyk/react-app-rewire-webpack-bundle-analyzer\n     ","permalink":"https://szk302.dev/posts/react-app-rewired%E3%81%A7webpack-bundle-analyzer%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B/","summary":"react-app-rewiredで作られたプロジェクトでwebpack-bundle-analyzerを使用したかったので調査 環境 react: 17.0.1 webpack: 4.44.2","title":"react-app-rewiredでwebpack-bundle-analyzerを使用する"},{"content":"Reactで書いたコードに含まれているconsole.logをwebpackのビルド時に消したいという要望があったので調査\n   環境  react  17.0.1\n webpack  4.44.2\n terser-webpack-plugin  4.2.3\n     設定 console.* 系すべてを消す場合 terserOptionsのcompressに drop_console=true を設定する\n { terserOptions:{ cache: true, parallel: true, sourceMap: false, compress:{ drop_console: true, } } }    console.log,infoだけ消す場合 terserOptionsのcompressに pure_funcs=[\u0026#39;console.log\u0026#39;,\u0026#39;console.info\u0026#39;] を設定する\n { terserOptions:{ cache: true, parallel: true, sourceMap: false, compress:{ pure_funcs: [ \u0026#39;console.log\u0026#39;, \u0026#39;console.info\u0026#39; ] } } }      参考   Remove console.log with TerserWebpackPlugin\n  terser/terser\n  webpack/TerserWebpackPlugin\n     ","permalink":"https://szk302.dev/posts/Webpack%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89%E6%99%82%E3%81%ABconsole.log%E3%82%92%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B/","summary":"Reactで書いたコードに含まれているconsole.logをwebpackのビルド時に消したいという要望があったので調査 環境 react 17.0.1 webpack 4.44.2 terser-webpack-plugin 4.2.3 設","title":"Webpackでビルド時にconsole.logを削除する"},{"content":"Webpackでビルド時に生成されるファイルを300kb以下に抑えたいという要望があったので調査\n   環境  react  17.0.1\n webpack  4.44.2\n terser-webpack-plugin  4.2.3\n     設定 以下のパラメータ設定をしたところ、ファイル数とファイルサイズが要望通りに収まった\n   minSize: 100000,\n  maxSize: 300000,\n  maxInitialRequests: 10,\n   { optimization: { splitChunks: { chunks: \u0026#39;initial\u0026#39;, minSize: 100000, maxSize: 300000, maxInitialRequests: 10, cacheGroups: { vendor: { test: /[\\\\/]node_modules[\\\\/]/, reuseExistingChunk: true, name(module,chunks,cacheGroupKey) { const allChunksHashes = chunks.map((item)=\u0026gt;item.hash).join(\u0026#39;~\u0026#39;); return `${cacheGroupKey}${allChunksHashes}` } }, }, }, }, }   ファイルは以下のようなファイル名で出力された。\n   main~ハッシュ値1.chunk.js\n  main~ハッシュ値1.chunk.js.map\n  main~ハッシュ値2.chunk.js\n  main~ハッシュ値2.chunk.js.map\n  runtime-main.ハッシュ値.js\n  runtime-main.ハッシュ値.js.map\n  vendor~ハッシュ値1.js\n  vendor~ハッシュ値1.js.map\n  vendor~ハッシュ値2.js\n  vendor~ハッシュ値2.js.map\n     参考   webpack/SplitChunksPlugin *\n     ","permalink":"https://szk302.dev/posts/Webpack%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89%E6%99%82%E3%81%ABSplitChunksPlugin%E3%81%A7%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%88%86%E5%89%B2%E3%82%92%E8%A1%8C%E3%81%86/","summary":"Webpackでビルド時に生成されるファイルを300kb以下に抑えたいという要望があったので調査 環境 react 17.0.1 webpack 4.44.2 terser-webpack-plugin 4.2.3 設定 以下のパラメータ設定をし","title":"Webpackでビルド時にSplitChunksPluginでファイル分割を行う"},{"content":"Gravatarに登録したプロフィール画像のURL取得方法を調査した。\n MD5のハッシュ値(小文字)に変換して https://www.gravatar.com/avatar/ につなげることでプロフィール画像のURLになる\n 以下、Powershellのスクリプト\n $email = \u0026#34;メールアドレス\u0026#34; $stream = [IO.MemoryStream]::new([Text.Encoding]::UTF8.GetBytes($email.Trim().ToLower())) $hash = (Get-FileHash -InputStream $stream -Algorithm MD5).Hash.toLower() echo \u0026#34;https://www.gravatar.com/avatar/$hash\u0026#34;     参考   Gravatar/Creating the Hash\n     ","permalink":"https://szk302.dev/posts/Gravatar%E3%81%AB%E7%99%BB%E9%8C%B2%E3%81%97%E3%81%9F%E3%83%97%E3%83%AD%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E7%94%BB%E5%83%8F%E3%81%AEURL%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/","summary":"Gravatarに登録したプロフィール画像のURL取得方法を調査した。 MD5のハッシュ値(小文字)に変換して https://www.gravatar.com/avatar/ につなげることでプロフィール画","title":"Gravatarに登録したプロフィール画像のURLを取得する"},{"content":"URLの最後に ?s=ピルクセル数 をつける\n  100px(https://www.gravatar.com/avatar/d9669165d1baf624cedab4afc3dfcc42?s=100)  \n 200px(https://www.gravatar.com/avatar/d9669165d1baf624cedab4afc3dfcc42?s=200)  \n     参考   Gravatar/Image Requests\n     ","permalink":"https://szk302.dev/posts/Gravatar%E3%81%AB%E7%99%BB%E9%8C%B2%E3%81%97%E3%81%9F%E3%83%97%E3%83%AD%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E7%94%BB%E5%83%8F%E3%81%AE%E3%82%B5%E3%82%A4%E3%82%BA%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B/","summary":"URLの最後に ?s=ピルクセル数 をつける 100px(https://www.gravatar.com/avatar/d9669165d1baf624cedab4afc3dfcc42?s=100) 200px(https://www.gravatar.com/avatar/d9669165d1baf624cedab4afc3dfcc42?s=200) 参考 Gravatar/Image Requests","title":"Gravatarに登録したプロフィール画像のサイズを指定する"},{"content":"以下のプルリクでPlantUMLが表示できるようになったようだ\n   rework external asciidoc integration #7281\n     対応 Gem経由でインストールしたAsciidocが対象とのことなので、ベースイメージを asciidoctor/docker-asciidoctor に変更し、 必要なモジュールを追加する。\n  Hugoを動かしているDockerファイルにモジュールを追加\nRUN apk add --no-cache ruby-dev alpine-sdk graphviz RUN gem install bundler json asciidoctor-html5s asciidoctor-diagram     config.ymlに以下のように設定を追加\n   markup: asciidocext: extensions: - asciidoctor-html5s - asciidoctor-diagram workingFolderCurrent: true trace: true attributes: my-base-url: \u0026#39;https://localhost/\u0026#39; my-attribute-name: my value     確認  hugo --destination 出力先ディレクトリ\n     参考   rework external asciidoc integration #7281\n     ","permalink":"https://szk302.dev/posts/Hugo%E3%81%A7AsciiDoc%E5%BD%A2%E5%BC%8F%E3%81%A7%E8%A8%98%E8%BF%B0%E3%81%97%E3%81%9FPlantumln%E3%81%AE%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B9%E5%9B%B3%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B/","summary":"以下のプルリクでPlantUMLが表示できるようになったようだ rework external asciidoc integration #7281 対応 Gem経由でインストールしたAsciidocが対象とのことなので","title":"HugoでAsciiDocファイルに記述したPlantUMLのシーケンス図を表示する"},{"content":"工事中\n ","permalink":"https://szk302.dev/fixed/blog/","summary":"工事中","title":"このブログについて"},{"content":"工事中\n ","permalink":"https://szk302.dev/fixed/profile/","summary":"工事中","title":"プロフィール"},{"content":"Awesome Open Source/hugo-themeなどからThemeを探してみた。\n スター数やシンプルなブログを考慮すると以下のThemeが残った。\n   Hugo Papermod\n  Loveit\n   fuseを使用してみたかったのでPapermodに決定\n   参考   Awesome Open Source/hugo-theme\n  Hugo Papermod\n  Loveit\n     ","permalink":"https://szk302.dev/posts/Blog%E3%81%AB%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8BTheme%E3%82%92%E6%B1%BA%E3%82%81%E3%82%8B/","summary":"Awesome Open Source/hugo-themeなどからThemeを探してみた。 スター数やシンプルなブログを考慮すると以下のThemeが残った。 Hugo Papermod Loveit","title":"Blogに使用するThemeを決める"}]